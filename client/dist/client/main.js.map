{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/calendar/add-plan/add-plan.component.ts","./src/app/calendar/add-plan/add-plan.component.html","./src/app/calendar/add-sub-plan-modal/add-sub-plan-modal.component.ts","./src/app/calendar/add-sub-plan-modal/add-sub-plan-modal.component.html","./src/app/calendar/calendar.component.ts","./src/app/calendar/calendar.component.html","./src/app/calendar/detail-box/detail-box.component.ts","./src/app/calendar/detail-box/detail-box.component.html","./src/app/calendar/edit-plan/edit-plan.component.ts","./src/app/calendar/edit-plan/edit-plan.component.html","./src/app/calendar/edit-sub-plan-modal/edit-sub-plan-modal.component.ts","./src/app/calendar/edit-sub-plan-modal/edit-sub-plan-modal.component.html","./src/app/calendar/monthly-calendar/monthly-calendar.component.ts","./src/app/calendar/monthly-calendar/monthly-calendar.component.html","./src/app/core/core.module.ts","./src/app/core/footer/footer.component.ts","./src/app/core/footer/footer.component.html","./src/app/core/header/header.component.ts","./src/app/core/header/header.component.html","./src/app/error/error.component.ts","./src/app/error/error.component.html","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/app/models/plan-date.model.ts","./src/app/models/plan.model.ts","./src/app/services/Utils.ts","./src/app/services/auth/auth-intercepter.service.ts","./src/app/services/error-interceptor.ts","./src/app/services/ng-var.directive.ts","./src/app/services/plan/plan.service.ts","./src/app/services/user/user.service.ts","./src/app/user/email-verification/email-verification.component.ts","./src/app/user/email-verification/email-verification.component.html","./src/app/user/login/login.component.ts","./src/app/user/login/login.component.html","./src/app/user/register/register.component.ts","./src/app/user/register/register.component.html","./src/app/user/user/user.component.ts","./src/app/user/user/user.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { EmailVerificationComponent } from './user/email-verification/email-verification.component';\nimport { ErrorComponent } from './error/error.component';\nimport { RegisterComponent } from './user/register/register.component';\nimport { LoginComponent } from './user/login/login.component';\nimport { UserComponent } from './user/user/user.component';\nimport { EditPlanComponent } from './calendar/edit-plan/edit-plan.component';\nimport { AddPlanComponent } from './calendar/add-plan/add-plan.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from \"./home/home.component\";\nimport { CalendarComponent } from './calendar/calendar.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'home', redirectTo: '/', pathMatch: 'full' },\n  {\n    path: 'calendar',\n    children: [\n      { path: 'date/:year/:month', component: CalendarComponent },\n      { path: 'addPlan/:year/:month/:date', component: AddPlanComponent },\n      { path: 'editPlan/:planId', component: EditPlanComponent }\n    ]\n  },\n  { path: 'user/:userId', component: UserComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'verify/:email', component: EmailVerificationComponent },\n  { path: 'verify/:email/:uuid', component: EmailVerificationComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: '**', component: ErrorComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","<div class=\"main-container\">\n  <app-header></app-header>\n  <section>\n    <router-outlet></router-outlet>\n  </section>\n  <app-footer id=\"footer-component\"></app-footer>\n</div>\n","import { AuthIntercepterService } from './services/auth/auth-intercepter.service';\nimport { AppRoutingModule } from './app-routing.module';\nimport { faGithub, faInstagram, faLinkedin, faSkype, faStrava, faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FaIconLibrary, FontAwesomeModule } from '@fortawesome/angular-fontawesome'\nimport { faBriefcase, faBusinessTime, faClock, faEnvelope, faGraduationCap } from \"@fortawesome/free-solid-svg-icons\";\nimport { AppComponent } from './app.component';\nimport { CoreModule } from './core/core.module';\nimport { HomeComponent } from './home/home.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Utils } from './services/Utils';\nimport { CalendarComponent } from './calendar/calendar.component';\nimport { MonthlyCalendarComponent } from './calendar/monthly-calendar/monthly-calendar.component';\nimport { VarDirective } from './services/ng-var.directive';\nimport { DetailBoxComponent } from './calendar/detail-box/detail-box.component';\n// import {MdbModule} from 'mdb-angular-ui-kit';\n// import {MdbModalConfig} from 'mdb-angular-ui-kit/forms';\nimport { AddPlanComponent } from './calendar/add-plan/add-plan.component';\nimport { MdbRippleModule } from 'mdb-angular-ui-kit/ripple';\nimport { MdbCheckboxModule } from 'mdb-angular-ui-kit/checkbox';\nimport { MdbCollapseModule } from 'mdb-angular-ui-kit/collapse';\nimport { MdbFormsModule } from 'mdb-angular-ui-kit/forms';\nimport { MdbModalConfig, MdbModalModule } from 'mdb-angular-ui-kit/modal';\nimport { MdbPopoverModule } from 'mdb-angular-ui-kit/popover';\nimport { MdbRadioModule } from 'mdb-angular-ui-kit/radio';\nimport { MdbRangeModule } from 'mdb-angular-ui-kit/range';\nimport { MdbTooltipModule } from 'mdb-angular-ui-kit/tooltip';\nimport { MdbValidationModule } from 'mdb-angular-ui-kit/validation';\nimport { AddSubPlanModalComponent } from './calendar/add-sub-plan-modal/add-sub-plan-modal.component';\nimport { EditPlanComponent } from './calendar/edit-plan/edit-plan.component';\nimport { EditSubPlanModalComponent } from './calendar/edit-sub-plan-modal/edit-sub-plan-modal.component';\nimport { UserComponent } from './user/user/user.component';\nimport { LoginComponent } from './user/login/login.component';\nimport { RegisterComponent } from './user/register/register.component';\nimport { ErrorComponent } from './error/error.component';\nimport { ErrorInterceptorService } from './services/error-interceptor';\nimport { EmailVerificationComponent } from './user/email-verification/email-verification.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    CalendarComponent,\n    MonthlyCalendarComponent,\n    VarDirective,\n    DetailBoxComponent,\n    AddPlanComponent,\n    AddSubPlanModalComponent,\n    EditPlanComponent,\n    EditSubPlanModalComponent,\n    UserComponent,\n    LoginComponent,\n    RegisterComponent,\n    ErrorComponent,\n    EmailVerificationComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    CoreModule,\n    // MdbModule,\n    MdbFormsModule,\n    MdbRippleModule,\n    MdbCheckboxModule,\n    MdbModalModule,\n    MdbRadioModule,\n    MdbRangeModule,\n    MdbValidationModule,\n    MdbCollapseModule,\n    MdbPopoverModule,\n    MdbTooltipModule,\n    FormsModule,\n    FontAwesomeModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthIntercepterService,\n      multi: true\n    },\n    {\n      provide: HTTP_INTERCEPTORS,           // Multi-provider token that represents the array of registered HttpInterceptor objects\n      useClass: ErrorInterceptorService,    // Out intercepter class\n      multi: true                           // Provide multiple dependencies for a single token\n    },\n    Utils,\n    // MdbModalConfig\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import { UserService } from 'src/app/services/user/user.service';\nimport { SubPlan } from './../../models/plan.model';\nimport { PlanDate } from 'src/app/models/plan-date.model';\nimport { PlanService } from './../../services/plan/plan.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Utils } from 'src/app/services/Utils';\nimport { AddSubPlanModalComponent } from '../add-sub-plan-modal/add-sub-plan-modal.component';\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Plan } from 'src/app/models/plan.model';\nimport { EditSubPlanModalComponent } from '../edit-sub-plan-modal/edit-sub-plan-modal.component';\nimport { MdbModalRef, MdbModalService } from 'mdb-angular-ui-kit/modal';\n\n@Component({\n  selector: 'app-add-plan',\n  templateUrl: './add-plan.component.html',\n  styleUrls: ['./add-plan.component.css']\n})\nexport class AddPlanComponent implements OnInit {\n  addModalRef: MdbModalRef<AddSubPlanModalComponent>;\n  editModalRef: MdbModalRef<EditSubPlanModalComponent>;\n  validationForm: FormGroup;\n\n  // Fixed date (chosen at first)\n  selectedDate: Date;\n  selectedDateString: string;\n  selectedPlan = new Plan(null, null, null, null, null, 0, 0);\n\n  // Date for the plans on another day (the section on the right side)\n  otherPlanDate: Date;\n  otherDateString: string;\n  otherPlan: PlanDate;\n\n  constructor(private route: ActivatedRoute, private userService: UserService, private planService: PlanService, private utils: Utils, private modalService: MdbModalService) { }\n\n  ngOnInit(): void {\n    // Check if the user is logged in\n    this.userService.isAuthenticated();\n\n    // Create a FormGroup object (empty FormControls)\n    this.validationForm = new FormGroup({\n      dueDate: new FormControl(null),\n      priority: new FormControl(null),\n      title: new FormControl(null),\n      description: new FormControl(null)\n    });\n\n    // Get the parameter from the URL\n    const routeParams = this.route.snapshot.paramMap;\n\n    // Get the date from the parameter\n    const yearString = parseInt(routeParams.get('year'));\n    const monthString = parseInt(routeParams.get('month'));\n    const dateString = parseInt(routeParams.get('date'));\n\n    // Split the date by '-' and create a new Date with it\n    // let dates = dateString.split('-');\n    this.selectedDate = new Date(yearString, monthString - 1, dateString);\n\n    // Set the selected date string\n    this.selectedDateString = this.utils.getDateString(this.selectedDate, false);\n\n    // If there is no chosend date for another day, assign the selected date initially\n    if (this.otherPlanDate == null) {\n      this.otherPlanDate = this.selectedDate;\n    }\n\n    // Create the PlanDate object using the variable otherPlanDate value\n    this.otherPlan = new PlanDate(this.otherPlanDate.getFullYear(), this.otherPlanDate.getMonth(), this.otherPlanDate.getDate());\n\n    // Get the plan on the day using the value of the otherPlanDate\n    this.planService.getDataByDate(this.otherPlanDate).subscribe(res => {\n      this.otherPlan = this.utils.getPlanDate(res.body, this.otherPlanDate);\n    });\n\n    // Set the string of the date\n    this.otherDateString = this.utils.getDateString(this.otherPlanDate, false);\n  }\n\n  get dueDate(): AbstractControl {\n    return this.validationForm.get('dueDate');\n  }\n\n  get priority(): AbstractControl {\n    return this.validationForm.get('priority');\n  }\n\n  get title(): AbstractControl {\n    return this.validationForm.get('title');\n  }\n\n  get description(): AbstractControl {\n    return this.validationForm.get('description');\n  }\n\n  /**\n   * Change the chosen date for the preview of other day's plans section.\n   *\n   * @param {boolean} isNextDay If the value is true, add a day to current date of other plan date.\n   * @memberof AddPlanComponent\n   */\n  changeDate(isNextDay: boolean) {\n\n    if (isNextDay) {  // If the isNextDay value is true, add a day to the otherPlanDate's date\n      this.otherPlanDate.setDate(this.otherPlanDate.getDate() + 1);\n    }\n    else {            // Otherwise, subtract a day from it\n      this.otherPlanDate.setDate(this.otherPlanDate.getDate() - 1);\n    }\n\n    this.ngOnInit();\n  }\n\n  /**\n   * Insert the Add Plan form value into the database.\n   *\n   * @param {FormGroup} form Form value to insert.\n   * @memberof AddPlanComponent\n   */\n  submitAddPlan(form: FormGroup) {\n    // Get the data and set the value\n    let data = form.value;\n\n    // Validate inputs and return if any data is invalid\n    if (!this.validateInputs(data))\n      return;\n\n    this.selectedPlan.title = data.title;\n    this.selectedPlan.description = data.description;\n    this.selectedPlan.dueDate = data.dueDate;\n    this.selectedPlan.priority = data.priority;\n\n    console.log('selectedPlan: ' + this.selectedPlan);\n    // Create a Plan object using JSON\n    let newPlan = JSON.parse(JSON.stringify(this.selectedPlan));\n\n    // Add the plan using the Plan service\n    this.planService.addPlan(newPlan).subscribe(data => {\n      this.ngOnInit();\n\n      // Reset the subplan list after inserting data\n      this.selectedPlan.subPlans = [];\n\n      // Reset the form\n      form.reset();\n    });\n  }\n\n  /**\n   * Open the add subplan modal and subscribe the Observable to get the data\n   * after the Add Subplan form is submitted or the modal is closed.\n   *\n   * @memberof AddPlanComponent\n   */\n  openModal() {\n    // Open the Add subplan modal\n    this.addModalRef = this.modalService.open(AddSubPlanModalComponent, {\n      modalClass: 'modal-dialog-centered'\n    });\n\n    // When the modal is closed, subscribe to the Observable\n    this.addModalRef.onClose.subscribe((data: any) => {\n      if (data) {   // If the data exists\n        let subPlanFromJson = JSON.parse(JSON.stringify(data));\n\n        subPlanFromJson.modalIsDone = subPlanFromJson.modalIsDone === null ? false: subPlanFromJson.modalIsDone\n        // Create a SubPlan object using the JSON\n        let subplan = new SubPlan(subPlanFromJson.modalTitle, subPlanFromJson.modalDescription, subPlanFromJson.modalPriority, subPlanFromJson.modalIsDone);\n\n        // Add the subplan to the array\n        this.selectedPlan.subPlans.push(subplan);\n      }\n    });\n  }\n\n  /**\n   * Open the edit subplan modal and subscribe the Observable to get the data\n   * after the Edit Subplan form is submitted or the modal is closed.\n   *\n   * @param {*} index Index of the subplan to edit\n   * @memberof AddPlanComponent\n   */\n  openEditModal(index) {\n    // Get the subplan by the index\n    let subPlan = this.selectedPlan.subPlans[index];\n\n    // Set the subplan using the Utils static method\n    Utils.setSubPlan(subPlan);\n\n    // Open the modal\n    this.editModalRef = this.modalService.open(EditSubPlanModalComponent, {\n      modalClass: 'modal-dialog-centered'\n    });\n\n    // When close the modal, get the data on the modal\n    this.editModalRef.onClose.subscribe((data: any) => {\n      if (data == 0) {  // If the data is 0 (Meaning that the subplan needs to be deleted)\n        // Remove the subplan fromt the array\n        this.deleteSubPlan(index);\n      }\n      else if (data) {  // If the data exists\n        let subPlanFromJson = JSON.parse(JSON.stringify(data));\n\n        // Create a SubPlan object using the JSON\n        let subplan = new SubPlan(subPlanFromJson.title, subPlanFromJson.description, subPlanFromJson.priority, subPlanFromJson.isDone);\n\n        // push the subplan to the subplan array\n        this.selectedPlan.subPlans[index] = subplan;\n      }\n    });\n  }\n\n  /**\n   * Remove the subplan from the array of subplan by its index.\n   *\n   * @param {number} spIndex Index of the subplan which needs to be removed.\n   * @memberof AddPlanComponent\n   */\n  deleteSubPlan(spIndex: number) {\n    this.selectedPlan.subPlans.splice(spIndex, 1);\n  }\n\n  /**\n   * Navigate to the selected other date's add plan page when the text is clicked.\n   *\n   * @memberof AddPlanComponent\n   */\n  navigateToOtherDate() {\n    // Navigate only when currently selected date and other plan date are different\n    if (this.selectedDate != this.otherPlanDate)\n      window.location.href = `calendar/addPlan/${this.otherPlanDate.getFullYear()}/${this.otherPlanDate.getMonth() + 1}/${this.otherPlanDate.getDate()}`;\n  }\n\n  /**\n   * Navigate to the selected other date's edit plan page when the text is clicked.\n   *\n   * @param {number} index Index of the plan to edit.\n   *\n   * @memberof AddPlanComponent\n   */\n   navigateToOtherPlan(index: number) {\n    let otherPlanToEdit = this.otherPlan.plans[index];\n\n    // If the IDs of the plans to edit are different, navigate to the chosen plan's edit page\n    if (otherPlanToEdit._id !== this.selectedPlan._id) {\n      window.location.href = `calendar/editPlan/${otherPlanToEdit._id}`;\n    }\n  }\n\n  /**\n   * Check if the required inputs are filled and display error message for the empty inputs.\n   *\n   * @param {*} formData Form data to check for the empty input.\n   * @return {*}  {boolean} Return true if all required inputs are valid.\n   * @memberof AddPlanComponent\n   */\n  validateInputs(formData: any): boolean {\n    // Get input elements\n    let titleInput = <HTMLInputElement>document.querySelector('#inputTitle');\n    let dueDateInput = <HTMLInputElement>document.querySelector('#dueDate');\n\n    // Get error message elements\n    let titleError = <HTMLElement>document.querySelector('.title.error-msg');\n    let dueDateError = <HTMLElement>document.querySelector('.dueDate.error-msg');\n    let priorityError = <HTMLElement>document.querySelector('.priority.error-msg');\n\n    // If data's property is null or empty, store false\n    let isTitleValid = formData.title != null && formData.title !== '';\n    let isDueDateValid = formData.dueDate != null && formData.dueDate !== '';\n    let isPriorityValid = formData.priority != null && formData.priority !== '';\n\n    // Check whether the input is valid and add or remove the class 'invalid'\n    this.utils.changeInputStatus(titleInput, titleError, isTitleValid);\n    this.utils.changeInputStatus(dueDateInput, dueDateError, isDueDateValid);\n    this.utils.changeInputStatus(null, priorityError, isPriorityValid);\n\n    // If any of input is invalid, return false\n    if (!isTitleValid || !isDueDateValid || !isPriorityValid)\n      return false;\n    // Otherwise, return true\n    return true;\n  }\n\n}\n","<div class=\"w-100 h-100\" id=\"add-plan-container\">\n  <div class=\"shadow-5-strong overflow-hidden d-flex\" id=\"add-plan-card\">\n    <!-- add plan form -->\n    <form id=\"card-form\" class=\"px-lg-5 px-4 pb-5 pt-4\" [formGroup]=\"validationForm\"\n      (ngSubmit)=\"submitAddPlan(validationForm)\">\n      <!-- date string -->\n      <h4 class=\"mb-4\">{{selectedDateString}}</h4>\n      <div class=\"d-lg-flex flex-row-reverse\">\n        <div class=\"ms-lg-3\">\n          <p class=\"mb-1 fw-normal\">Priority</p>\n          <!-- radio container -->\n          <div class=\"d-flex position-relative ms-1\">\n\n            <label class=\"radio-container fw-light me-3\">High\n              <input type=\"radio\" id=\"radioHigh\" value=\"3\" class=\"mt-1 priority\" formControlName=\"priority\" required>\n              <span class=\"radio-checkmark\"></span>\n            </label>\n\n            <label class=\"radio-container fw-light me-3\">Medium\n              <input type=\"radio\" id=\"radioMid\" value=\"2\" class=\"mt-1 priority\" formControlName=\"priority\" required>\n              <span class=\"radio-checkmark\"></span>\n            </label>\n\n            <label class=\"radio-container fw-light\">Low\n              <input type=\"radio\" id=\"radioLow\" value=\"1\" class=\"mt-1 priority\" formControlName=\"priority\" required>\n              <span class=\"radio-checkmark\"></span>\n            </label>\n          </div>\n          <!-- form control error message -->\n          <span class=\"priority error-msg mt-1\">Priority is required.</span>\n        </div>\n        <div class=\"mt-2 mt-lg-0\">\n          <!-- change the label color -->\n          <p class=\"fw-normal mb-1\">Due date</p>\n          <!-- due date form control -->\n          <div>\n            <mdb-form-control>\n              <input mdbInput type=\"datetime-local\" id=\"dueDate\" class=\"my-0 dueDate light-calendar-icon\"\n                formControlName=\"dueDate\" required />\n            </mdb-form-control>\n            <span class=\"dueDate error-msg mt-1\">Due date is required.</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- title form control -->\n      <mdb-form-control>\n        <input mdbInput type=\"text\" id=\"inputTitle\" class=\"title mt-2\" formControlName=\"title\" placeholder=\"Plan title\"\n          required />\n      </mdb-form-control>\n      <span class=\"title error-msg mt-1\">Title is required.</span>\n      <!-- description form control -->\n      <mdb-form-control>\n        <textarea mdbInput type=\"text\" id=\"inputDesc\" rows=\"4\" class=\"mt-2\" formControlName=\"description\"\n          placeholder=\"Description\"></textarea>\n      </mdb-form-control>\n      <!-- subplan container -->\n      <p class=\"mb-1 mt-3 fw-normal\">Sub-plans</p>\n\n      <div *ngIf=\"selectedPlan.subPlans.length > 0; else emptySubplan\">\n        <!-- for loop of subplan -->\n        <div *ngFor=\"let sp of selectedPlan.subPlans; let subIndex = index\" (click)=\"openEditModal(subIndex)\"\n          class=\"sub-plan-item shadow-3 p-3 rounded mb-2 fw-light text-break\">\n          <!-- subplan title -->\n          <h6 class=\"d-flex align-items-center mb-1 fw-light text-light\">\n            <span [ngClass]=\"sp.isDone ? 'text-decoration-line-through' : ''\">{{sp.title}}</span>\n            <i (click)=\"deleteSubPlan(subIndex)\" class=\"fas fa-times fa-xs ms-auto\"></i>\n          </h6>\n          <p class=\"priority-text fw-light mb-0 text-light\">\n            PRIORITY:\n            <span class=\"fw-normal\" [ngClass]=\"['text-success', 'text-warning', 'text-danger'][sp.priority - 1]\">\n              {{['LOW','MID', 'HIGH'][sp.priority - 1]}}\n            </span>\n          </p>\n          <!-- subplan description -->\n          <p *ngIf=\"sp.description != ''\" class=\"mb-0 fw-light small text-purple-muted\">{{sp.description}}\n          </p>\n        </div>\n      </div>\n      <ng-template #emptySubplan>\n        <div class=\"rounded d-flex justify-content-center py-5 empty-subplan-container fw-light small\">\n          There is no sub-plan.\n        </div>\n      </ng-template>\n\n      <!-- button container -->\n      <div class=\"pt-5 d-lg-flex\">\n        <button type=\"submit\" class=\"btn btn-sm text-white fw-light w-100 py-2 mt-2 me-3 btn-save\"\n          mdbRipple>Save</button>\n        <button type=\"button\" class=\"btn btn-sm text-white fw-light w-100 py-2 mt-2 me-3\" id=\"btn-sub-plan\"\n          (click)=\"openModal()\" mdbRipple>Add sub-plan</button>\n        <a class=\"btn btn-sm text-white fw-light w-100 py-2 mt-2\" id=\"btn-cancel\" href=\"/calendar\" mdbRipple>Cancel</a>\n      </div>\n    </form>\n    <!-- other date plan container -->\n    <div class=\"w-100 p-4 other-plan-container\">\n      <span class=\"d-block text-center small fw-light mb-1\">Other plans on</span>\n      <h4 class=\"mb-4 text-center d-flex justify-content-between align-items-center\">\n        <i class=\"fas fa-chevron-left\" (click)=\"changeDate(false)\"></i>\n        <span class=\"shadow-sm p-1 rounded cursor-pointer\" (click)=\"navigateToOtherDate()\"\n          mdbTooltip=\"Add plan on this day\" placement=\"top\">\n          {{otherDateString}}\n        </span>\n        <i class=\"fas fa-chevron-right\" (click)=\"changeDate(true)\"></i>\n      </h4>\n      <!-- other date plans -->\n      <div *ngIf=\"otherPlan.planCount > 0; else elseTemplate\" id=\"other-plan-item-container\">\n        <div *ngFor=\"let plan of otherPlan.plans; let i = index\"\n          class=\"rounded shadow overflow-hidden mb-3 cursor-pointer\"\n          [ngClass]=\"i == otherPlan.plans.length - 1? '' : 'mb-3'\" (click)=\"navigateToOtherPlan(i)\">\n          <!-- main plan container -->\n          <div class=\"p-3 other-plan-item\">\n            <!-- other plan title -->\n            <h6 class=\"d-flex align-items-center mb-1 fw-light text-light\">\n              <span [ngClass]=\"plan.progress == 100 ? 'text-decoration-line-through' : ''\">{{plan.title}}</span>\n            </h6>\n            <p class=\"priority-text fw-light mb-0 text-light\">\n              PRIORITY:\n              <span class=\"fw-normal\" [ngClass]=\"['text-success', 'text-warning', 'text-danger'][plan.priority - 1]\">\n                {{['LOW','MID', 'HIGH'][plan.priority - 1]}}\n              </span>\n            </p>\n            <!-- other plan description -->\n            <p *ngIf=\"plan.description != ''\" class=\"mb-0 fw-light small text-purple-muted\">\n              {{plan.description}}</p>\n          </div>\n          <!-- subplan container -->\n          <div *ngFor=\"let sp of plan.subPlans\" class=\"p-3 other-sub-plan-item\">\n            <!-- other plan title -->\n            <h6 class=\"mb-0\"><i class=\"fas fa-exclamation me-2\"\n                [ngClass]=\"['text-success', 'text-warning', 'text-danger'][sp.priority - 1]\">\n              </i>\n              <span [ngClass]=\"sp.isDone ? 'text-decoration-line-through' : ''\">{{sp.title}}</span>\n            </h6>\n          </div>\n        </div>\n      </div>\n      <ng-template #elseTemplate>\n        <p class=\"mb-0 py-5 fw-light text-center\">There is no plan on this day.</p>\n      </ng-template>\n    </div>\n  </div>\n</div>\n","import { Utils } from 'src/app/services/Utils';\nimport { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\n@Component({\n  selector: 'app-add-sub-plan-modal',\n  templateUrl: './add-sub-plan-modal.component.html',\n  styleUrls: ['../add-plan/add-plan.component.css', './add-sub-plan-modal.component.css']\n})\n\nexport class AddSubPlanModalComponent implements OnInit {\n  validationForm: FormGroup;\n\n  constructor(public modalRef: MdbModalRef<AddSubPlanModalComponent>, private utils: Utils) { }\n\n  ngOnInit(): void {\n    this.validationForm = new FormGroup({\n      modalPriority: new FormControl(null),\n      modalTitle: new FormControl(null),\n      modalDescription: new FormControl(null),\n      modalIsDone: new FormControl(null)\n    });\n  }\n\n  get modalPriority(): AbstractControl {\n    return this.validationForm.get('modalPriority');\n  }\n\n  get modalTitle(): AbstractControl {\n    return this.validationForm.get('modalTitle');\n  }\n\n  get modalDescription(): AbstractControl {\n    return this.validationForm.get('modalDescription');\n  }\n\n  get modalIsDone(): AbstractControl {\n    return this.validationForm.get('modalIsDone');\n  }\n\n  /**\n   * Check if the required inputs are filled and display error message for the empty inputs.\n   *\n   * @param {*} formData Form data to check for the empty input.\n   * @return {*}  {boolean} Return true if all required inputs are valid.\n   * @memberof AddPlanComponent\n   */\n  validateInputs(formData: any): boolean {\n    // Get input elements\n    let titleInput = <HTMLInputElement>document.querySelector('#modal-inputTitle');\n\n    // Get error message elements\n    let titleError = <HTMLElement>document.querySelector('.title.modal-error-msg');\n    let priorityError = <HTMLElement>document.querySelector('.priority.modal-error-msg');\n\n    // If data's property is null or empty, store false\n    let isTitleValid = formData.modalTitle != null && formData.modalTitle !== '';\n    let isPriorityValid = formData.modalPriority != null && formData.modalPriority !== '' && !isNaN(formData.modalPriority);\n\n    // Check whether the input is valid and add or remove the class 'invalid'\n    this.utils.changeInputStatus(titleInput, titleError, isTitleValid);\n    this.utils.changeInputStatus(null, priorityError, isPriorityValid);\n\n    // If any of input is invalid, return false\n    if (!isTitleValid || !isPriorityValid)\n      return false;\n    // Otherwise, return true\n    return true;\n  }\n\n  /**\n   * A method executed when the add subplan button is clicked.\n   * It passes the value calling the close method.\n   *\n   * @param {*} data Data of the Add Subplan form to submit.\n   * @memberof AddSubPlanModalComponent\n   */\n  submitAddSubPlan(data) {\n    // Store priority as an integer\n    data.value.priority = parseInt(data.value.titlePriority);\n\n    // If the form is valid, call the close function passing the data\n    if (this.validateInputs(data.value)) {\n      this.close(data.value);\n    }\n  }\n\n  /**\n   * Close the Add Subplan modal.\n   *\n   * @param {*} data Data to return when closing\n   * @memberof AddSubPlanModalComponent\n   */\n  close(data): void {\n    if (data) {   // If the data exists\n      this.modalRef.close(data);\n    }\n  }\n}\n","<!-- header of the modal -->\n<div class=\"modal-header justify-content-center pt-0 px-0\">\n  <h4 class=\"modal-title\" id=\"exampleModalLabel\">New Sub-plan</h4>\n</div>\n<!-- add subplan form -->\n<form class=\"modal-body px-0\" id=\"sub-plan-form\" [formGroup]=\"validationForm\"\n  (ngSubmit)=\"submitAddSubPlan(validationForm)\">\n  <!-- radios -->\n  <div class=\"mb-3\">\n    <p class=\"mb-1 fw-normal text-purple-muted\">Priority</p>\n    <!-- radio container -->\n    <div class=\"d-flex position-relative ms-1\">\n      <label class=\"radio-container fw-light me-3\">High\n        <input type=\"radio\" id=\"modal-radioHigh\" value=\"3\" class=\"mt-1 priority\" formControlName=\"modalPriority\"\n          required>\n        <span class=\"radio-checkmark\"></span>\n      </label>\n\n      <label class=\"radio-container fw-light me-3\">Medium\n        <input type=\"radio\" id=\"modal-radioMid\" value=\"2\" class=\"mt-1 priority\" formControlName=\"modalPriority\"\n          required>\n        <span class=\"radio-checkmark\"></span>\n      </label>\n\n      <label class=\"radio-container fw-light\">Low\n        <input type=\"radio\" id=\"modal-radioLow\" value=\"1\" class=\"mt-1 priority\" formControlName=\"modalPriority\"\n          required>\n        <span class=\"radio-checkmark\"></span>\n      </label>\n\n      <!-- checkbox for isDone -->\n      <div class=\"ms-auto\">\n        <!-- <input class=\"float-end\" formControlName=\"modalIsDone\" type=\"checkbox\" value=\"true\" mdbTooltip=\"Mark as done\"\n          placement=\"top\" /> -->\n        <label class=\"checkbox-container\" mdbTooltip=\"Mark as done\" placement=\"top\">\n          <input type=\"checkbox\" value=\"true\" formControlName=\"modalIsDone\">\n          <span class=\"checkbox-checkmark\"></span>\n        </label>\n      </div>\n    </div>\n    <!-- form control error message -->\n    <span class=\"priority modal-error-msg mt-1\">Priority is required.</span>\n  </div>\n  <!-- title form control -->\n  <mdb-form-control class=\"mb-2\">\n    <input mdbInput type=\"text\" id=\"modal-inputTitle\" class=\"title\" formControlName=\"modalTitle\"\n      placeholder=\"Plan title\" required />\n  </mdb-form-control>\n  <span class=\"title modal-error-msg mt-1\">Title is required.</span>\n  <!-- description form control -->\n  <mdb-form-control>\n    <textarea mdbInput type=\"text\" id=\"modal-inputDesc\" rows=\"4\" class=\"\" formControlName=\"modalDescription\"\n      placeholder=\"Description\"></textarea>\n  </mdb-form-control>\n</form>\n<!-- modal footer -->\n<div class=\"modal-footer pb-0 px-0\">\n  <button mdbRipple type=\"submit\" class=\"btn text-light btn-save\" form=\"sub-plan-form\">Add</button>\n  <button mdbRipple type=\"button\" class=\"btn text-light btn-save\" (click)=\"modalRef.close()\">\n    Cancel\n  </button>\n</div>\n","import { Utils } from 'src/app/services/Utils';\nimport { PlanDate } from './../models/plan-date.model';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.css']\n})\nexport class CalendarComponent implements OnInit {\n  // planDate and dateString to pass to detail-box component\n  planDate: PlanDate = null;\n  dateString: string;\n  shortDateString: string;\n\n  paramYear: number;\n  paramMonth: number;\n  months: any[] = [];\n\n  constructor(private utils: Utils, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    // Get the parameter from the URL\n    const routeParams = this.route.snapshot.paramMap;\n\n    // Get the date from the parameter\n    this.paramYear = parseInt(routeParams.get('year'));\n    this.paramMonth = parseInt(routeParams.get('month'));\n\n    let date = new Date(this.paramYear, this.paramMonth - 1, 1);\n\n    // Navigate to the page of the given year and month\n    this.router.navigate([`calendar/date/${date.getFullYear()}/${date.getMonth() + 1}`]);\n\n    let monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n    // Add month elements to the array only when the array does not have any item (Without checking it, duplicates keeps being added whenever it's initialized)\n    if (this.months.length <= 0) {\n      for (let i = 0; i < monthNames.length; i++) {\n        this.months.push({ name: monthNames[i], link: `/calendar/date/${date.getFullYear()}/${i + 1}`, isSelected: i + 1 === this.paramMonth });\n      }\n    }\n\n    let changeMonthBtnText = <HTMLElement>document.querySelector('#change-month-text');\n\n    // If the user clicks the element other than the change month button or the text, hide the month list and display the buttno text\n    document.addEventListener('click', (e) => {\n      let target = <HTMLElement>e.target;\n      if (target.id !== 'change-date-btn' && target.innerText !== changeMonthBtnText.innerText) {\n        let changeMonthButton = <HTMLElement>document.querySelector('#change-date-btn');\n        changeMonthButton.classList.remove('selected');\n      }\n    })\n  }\n\n  /**\n   * Update detail-box component when it's clicked, passing PlanDate object.\n   *\n   * @param {PlanDate} planDate PlanDate object from monthly-calendar component.\n   * @memberof CalendarComponent\n   */\n  getPlanDate(planDate: PlanDate) {\n    // Set the planDate value\n    this.planDate = planDate;\n\n    // Create a date using the planDate object\n    let date = new Date(this.planDate.year, this.planDate.month, this.planDate.date);\n\n    // Set the date string using the utils class' method\n    this.dateString = this.utils.getDateString(date, true);\n    this.shortDateString = this.utils.getDateString(date, false);\n\n    this.ngOnInit();\n  }\n\n  getChangedMonth(date: Date) {\n    this.router.navigate([`calendar/date/${date.getFullYear()}/${date.getMonth()}`]);\n  }\n\n  toggleChageMonthBtn() {\n    let changeMonthButton = <HTMLElement>document.querySelector('#change-date-btn');\n    changeMonthButton.classList.toggle('selected');\n  }\n\n}\n","<div class=\"h-100 w-100 d-flex\" id=\"calendar-page-wrapper\">\n  <!-- Pass the planDate and dateString value -->\n  <app-detail-box class=\"\" [planDateFromCal]=planDate [dateStringFromCal]=dateString\n    [shortDateStringFromCal]=shortDateString></app-detail-box>\n  <div class=\"d-flex justify-content-center\" id=\"calendar-wrapper\">\n    <div id=\"calendar\">\n      <!-- Emit the event -->\n      <app-monthly-calendar [paramYear]=\"paramYear\" [paramMonth]=\"paramMonth\" (changeMonthEmitter)=\"getChangedMonth($event)\" (planEmitter)=\"getPlanDate($event)\"></app-monthly-calendar>\n      <div class=\"position-fixed p-2 rounded-pill small fw-light d-md-block d-none\" id=\"change-date-btn\" (click)=\"toggleChageMonthBtn()\">\n        <span id=\"change-month-text\" class=\"mx-2\">Change Month</span>\n        <ul class=\"mb-0 ps-0 justify-content-between\" id=\"change-month-list\">\n          <li *ngFor=\"let month of months\" class=\"d-inline-block w-100 text-center rounded-pill month-item\" [ngClass]=\"month.isSelected ? 'selected-month rounded-pill' : 'fw-light'\">\n            <a href=\"{{month.link}}\">{{month.name}}</a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n","import { PlanService } from './../../services/plan/plan.service';\nimport { PlanDate } from './../../models/plan-date.model';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { Plan, SubPlan } from 'src/app/models/plan.model';\nimport { Utils } from 'src/app/services/Utils';\nimport { AddSubPlanModalComponent } from '../add-sub-plan-modal/add-sub-plan-modal.component';\nimport { MdbModalRef, MdbModalService } from 'mdb-angular-ui-kit/modal';\n\n@Component({\n  selector: 'app-detail-box',\n  templateUrl: './detail-box.component.html',\n  styleUrls: ['./detail-box.component.css']\n})\n\nexport class DetailBoxComponent implements OnInit {\n  modalRef: MdbModalRef<AddSubPlanModalComponent>;\n  constructor(private planService: PlanService, private utils: Utils, private modalService: MdbModalService) { }\n\n  @Input('planDateFromCal') planDate: PlanDate;\n  @Input('dateStringFromCal') dateString: string;\n  @Input('shortDateStringFromCal') shortDateString: string;\n\n  selectedBtnIndex: number;\n  priorityList: string[];\n\n  ngOnInit(): void {\n    this.priorityList = ['LOW', 'MID', 'HIGH'];\n  }\n\n  /**\n   * Executed when the arrow besides the plan is clicked to expand the\n   * list of subplans which belong to the plan.\n   *\n   * @param {string} index Index of the clicked arrow's plan.\n   * @memberof DetailBoxComponent\n   */\n  expandPlan(index: string) {\n    // Get the selected ul and arrow object\n    let targetUl = document.getElementById('plan-' + index);\n    let targetArrow = document.getElementById('arrow-' + index);\n\n    // Toggle the arrow class\n    targetArrow.classList.toggle('fa-chevron-left');\n    targetArrow.classList.toggle('fa-chevron-down');\n\n    // Open the subplans list\n    targetUl.classList.toggle('opened');\n  }\n\n  /**\n   * Update the whole plan when the plan is marked as done.\n   *\n   * @param {*} event Object containing information about the action that just happened.\n   * @param {string} planIndex Index of the plan which needs to be updated.\n   * @memberof DetailBoxComponent\n   */\n  updateMainPlan(event, planIndex: string) {\n    let checkBox = event.target;  // Checkbox which is just clicked\n\n    let plan = <Plan>this.planDate.plans[planIndex];  // Get the plan object using the given index\n    let subPlans = plan.subPlans;\n\n    // Update subPlan's isDone value as well as plan's progress value\n    if (checkBox.checked) {\n      // If the main plan's progress is 100, every subplan is marked as done\n      plan.progress = 100;\n      subPlans.forEach(element => {\n        element.isDone = true;\n      });\n    }\n    else {\n      // If the main plan's progress is 0, every subplan is marked as undone\n      plan.progress = 0;\n      subPlans.forEach(element => {\n        element.isDone = false;\n      });\n    }\n\n    this.updatePlan(plan);  // Call the updatePlan function\n    this.filterPlans();     // Filter the plan after the update\n  }\n\n  /**\n   * Update the subplan when the it is marked as done.\n   *\n   * @param {*} event Object containing information about the action that just happened.\n   * @param {string} planIndex Index of the plan which contains the subplan.\n   * @param {string} subPlanIndex Index of the subplan which needs to be updated.\n   * @memberof DetailBoxComponent\n   */\n  updateSubPlan(event, planIndex: string, subPlanIndex: string) {\n    let checkBox = event.target;  // clicked checkbox\n    let plan = <Plan>this.planDate.plans[planIndex];  // Get the plan using the index\n\n    console.log('target: '+JSON.stringify(checkBox));\n    console.log(checkBox);\n    \n\n    // As the checkbox is checked or unchecked, update its value of isDone\n    if (checkBox.checked)\n      plan.subPlans[subPlanIndex].isDone = true;\n    else\n      plan.subPlans[subPlanIndex].isDone = false;\n\n    this.updatePlan(plan);  // Call the updatePlan function\n    this.filterPlans();     // Filter plans after the update\n  }\n\n  /**\n   * Filter the plans depending on their isDone values.\n   * TODO: if plan's progress is changed, it should be filtered immediately\n   *\n   * @memberof DetailBoxComponent\n   */\n  filterPlans() {\n    let selectValue = (<any>document.getElementById('plan-category')).value;\n\n    // Get all plan items\n    let listItems = <any>document.querySelectorAll('li.plans-container-items');\n\n    // If the category all is selected, display every plan\n    if (selectValue == 'all') {\n      listItems.forEach(li => {\n        li.style.display = \"block\";\n      });\n    }\n    else {\n      listItems.forEach(li => {\n        // Depending on the selected category, change the display value of the item\n        if (!li.classList.contains(selectValue)) {\n          li.style.display = \"none\";\n        }\n        else {\n          li.style.display = \"block\";\n        }\n      });\n    }\n  }\n\n  /**\n   * Open the menu for each plan.\n   *\n   * @param {number} btnIndex Index of the clicked menu button.\n   * @memberof DetailBoxComponent\n   */\n  toggleMenu(btnIndex: number) {\n    this.selectedBtnIndex = btnIndex;\n\n    // Change the visibility of the overlay and menu list\n    this.toggleMenuOverlay();\n\n    // Menu button to open the menu\n    let menuButton = document.querySelector(`#btn-menu-${btnIndex} i`);\n\n    // Menu list element and items in it\n    let menuList = <HTMLElement>document.querySelector('#menu-list');\n    let clientRect = menuButton.getBoundingClientRect();\n\n    // Locate menu list in the screen larger than xs\n    if (screen.width > 576) {\n      // Set the position of the menu list relative to the window\n      menuList.style.left = `${clientRect.left + 15}px`;\n      menuList.style.top = `${clientRect.top - 5}px`;\n    }\n    else {\n      // Set the position of the menu list relative to the window\n      menuList.style.left = `${clientRect.left - 120}px`;\n      menuList.style.top = `${clientRect.top - 78}px`;\n    }\n  }\n\n  /**\n   * Toggle the classes for opening or closing the detail box.\n   * - Change the visibility of the menu overlay element\n   * - Disable or enable the scroll (scroll disabled when menu opened)\n   *\n   * @memberof DetailBoxComponent\n   */\n  closeDetailBox() {\n    this.utils.changeDetailBox(false, null, null);\n  }\n\n  /**\n   * Depending on the index of the selected plan menu and the index of the menu,\n   * add subplan, edit or delete the plan.\n   * (This function is called in the EventListener)\n   *\n   * @param {number} menuIndex Index of the selected menu.\n   * @memberof DetailBoxComponent\n   */\n  menuItemAction(menuIndex: number) {\n    // Selected index of the menu button\n    let btnIndex = this.selectedBtnIndex;\n\n    // Get the selected plan's id to edit or delete the plan\n    let planId = (<PlanDate>this.planDate).plans[btnIndex]._id;\n\n    switch (menuIndex) {\n      case 0:\n        // To open the add subplan modal, pass the selected button's index\n        this.openModal(btnIndex);\n        // Change the visibility of the menu list and overlay\n        this.toggleMenuOverlay();\n        break;\n      case 1:\n        // Go to the selected plan's editPlan page\n        window.location.href = `calendar/editPlan/${planId}`;\n        // Change the visibility of the menu list and overlay\n        this.toggleMenuOverlay();\n        break;\n      case 2:\n        // To delete the selected plan, pass the selected button's index\n        this.deletePlan(planId);\n        // Change the visibility of the menu list and overlay\n        this.toggleMenuOverlay();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Toggle the classes for opening or closing the menu list.\n   * - Change the visibility of the menu overlay element\n   * - Disable or enable the scroll (scroll disabled when menu opened)\n   *\n   * @memberof DetailBoxComponent\n   */\n  toggleMenuOverlay() {\n    // Get the menu overlay element and body to toggle the class\n    let menuOverlay = document.getElementById('menu-overlay');\n\n    // Toggle the class to change its visibility and disable or enable the scroll\n    // (When the menu is opened, scroll is disabled)\n    menuOverlay.classList.toggle('d-none');\n\n    this.utils.hideScroll(true);\n  }\n\n  /**\n   * Delete a plan by its ID and refresh the list.\n   *\n   * @param {string} id ID of the plan to delete.\n   * @memberof DetailBoxComponent\n   */\n  deletePlan(id: string) {\n    this.planService.deletePlan(id).subscribe(data => {\n      this.refreshPlanDate();\n    });\n  }\n\n  /**\n   * Remove a subplan from the array and update the plan.\n   *\n   * @param {Plan} plan Plan that needs to be updated when deleting the subplan.\n   * @param {number} spIndex Index of the subplan in the plan.\n   * @memberof DetailBoxComponent\n   */\n  deleteSubPlan(plan: Plan, spIndex: number) {\n    // Remove the plan from the subplan list\n    plan.subPlans.splice(spIndex, 1);\n\n    // Update the plan\n    this.updatePlan(plan);\n  }\n\n  /**\n   * Update the plan using the plan service.\n   *\n   * @param {Plan} plan Plan to update.\n   * @memberof DetailBoxComponent\n   */\n  updatePlan(plan: Plan) {\n    plan.progress = this.utils.calculateProgress(plan);\n    \n    this.planService.updatePlan(plan).subscribe(data => {\n      console.log('done!');\n      \n    });\n  }\n\n  /**\n   * Refresh the plans in current date.\n   *\n   * @memberof DetailBoxComponent\n   */\n  refreshPlanDate() {\n    // Create a Date object using the current date value\n    let date = new Date(this.planDate.year, this.planDate.month, this.planDate.date);\n    // Get a PlanDate and make the value of planDate variable up to date\n    this.planService.getDataByDate(date).subscribe(res => {\n      this.planDate = this.utils.getPlanDate(res.body, date);\n    });\n  }\n\n  /**\n   * Open the modal to add a new subplan.\n   *\n   * @param {number} planIndex Index of the plan which the subplan will be inserted.\n   * @memberof DetailBoxComponent\n   */\n  openModal(planIndex: number) {\n    // Open the Add Subplan modal\n    this.modalRef = this.modalService.open(AddSubPlanModalComponent, {\n      modalClass: 'modal-dialog-centered'\n    });\n\n    // Get the plan by index\n    let plan = <Plan>this.planDate.plans[planIndex];\n\n    this.modalRef.onClose.subscribe((data: any) => {\n      if (data) {   // if the data exists\n        let subPlanFromJson = JSON.parse(JSON.stringify(data));\n\n        // Create a new subplan object using the json data string\n        let subplan = new SubPlan(subPlanFromJson.modalTitle, subPlanFromJson.modalDescription, subPlanFromJson.modalPriority, subPlanFromJson.modalIsDone);\n\n        // Add the new subplan item to the list\n        plan.subPlans.push(subplan);\n      }\n      // Update the plan\n      this.updatePlan(plan);\n    });\n  }\n}\n","<!-- Menu overlay -->\n<div id=\"menu-overlay\" class=\"w-100 h-100 position-absolute d-none\" (click)=\"toggleMenuOverlay()\">\n  <!-- Menu -->\n  <div class=\"list-group position-absolute\" id=\"menu-list\">\n    <div mdbRipple class=\"list-group-item py-1 small rounded cursor-pointer mb-1\" (click)=\"menuItemAction(0)\">Add\n      subplan</div>\n    <div mdbRipple class=\"list-group-item py-1 small rounded cursor-pointer mb-1\" (click)=\"menuItemAction(1)\">Edit</div>\n    <div mdbRipple class=\"list-group-item py-1 small rounded cursor-pointer\" (click)=\"menuItemAction(2)\">Delete</div>\n  </div>\n</div>\n<div id=\"detail-box-overlay\" class=\"position-absolute\" (click)=\"closeDetailBox()\"></div>\n<div class=\"h-100 position-fixed\" id=\"detail-box\">\n  <button class=\"position-absolute top-0 end-0 pt-2 pe-3 border-0 bg-transparent text-light\"\n    (click)=\"closeDetailBox()\">&times;\n  </button>\n  <!-- Display plan if there is any plan on current date -->\n  <div *ngIf=\"planDate\" class=\"p-4 h-100\">\n    <!-- Date -->\n    <h5 class=\"mb-4 fw-light\">\n      <img class=\"me-4\" src=\"assets/img/logo-icon-with-bg-light.png\" width=\"50\" alt=\"image of the planify logo\">\n      <span class=\"d-md-inline-block d-none\">{{dateString}}</span>\n      <span class=\"d-md-none d-inline-block\">{{shortDateString}}</span>\n    </h5>\n    <div class=\"d-flex align-items-center mb-3\">\n      <p class=\"mb-0\">{{planDate.planCount}} item(s)</p>\n      <!-- Dropdown menu to filter plans -->\n      <select (change)=\"filterPlans()\" class=\"form-select form-select-sm ms-auto\" id=\"plan-category\">\n        <option value=\"all\" selected>All</option>\n        <option value=\"done\">Done</option>\n        <option value=\"undone\">Not done</option>\n      </select>\n    </div>\n    <!-- Plan container -->\n    <div class=\"position-relative\" id=\"plan-list-container\">\n      <!-- When there is no plan on current date -->\n      <div *ngIf=\"planDate.plans.length == 0\" class=\"p-5 shadow-5 rounded text-center no-plan-div\">\n        <p class=\"mb-0 small fw-light\">There is no plan on this day.</p>\n      </div>\n      <ul class=\"list-group shadow-5 plans-container\">\n        <!-- Different class depending on the progress -->\n        <li class=\"list-group-item plans-container-items border-0 p-0 me-1 mb-3\"\n          [ngClass]=\"plan.progress == 100 ? 'done bg-yellow-muted' : 'undone'\"\n          *ngFor=\"let plan of planDate.plans; let i = index;\">\n          <div class=\"px-3 pt-3 pb-2 d-flex align-items-center\">\n            <div class=\"me-3\">\n              <!-- Isdone checkbox -->\n              <label class=\"checkbox-container\">\n                <input type=\"checkbox\" id=\"plan-checkbox-{{i}}\" [checked]=\"plan.progress == 100\"\n                  (change)=\"updateMainPlan($event, i)\">\n                <span class=\"checkbox-checkmark\"></span>\n              </label>\n            </div>\n            <span class=\"text-light\">{{plan.title}}</span>\n            <i *ngIf=\"plan.subPlans.length > 0\" class=\"fas fa-chevron-left ms-auto text-light\" id=\"arrow-{{i}}\"\n              (click)=\"expandPlan(i)\"></i>\n          </div>\n          <p class=\"mb-1 priority-text fw-light px-3 text-light\">PRIORITY:\n            <span class=\"fw-normal\"\n              [ngClass]=\"['text-success', 'text-warning', 'text-danger'][plan.priority - 1]\">{{['LOW', 'MID',\n              'HIGH'][plan.priority - 1]}}</span>\n          </p>\n          <!-- Plan description -->\n          <div class=\"plan-description text-light fw-lighter ps-3 pe-4 pb-3 position-relative\">\n            {{plan.description}}\n            <!-- Menu button -->\n            <button id=\"btn-menu-{{i}}\" class=\"small position-absolute btn-menu text-muted bg-transparent border-0\"\n              (click)=\"toggleMenu(i)\">\n              <i class=\"fas fa-ellipsis-v fa-xs\"></i>\n            </button>\n          </div>\n          <!-- Progress bar -->\n          <div class=\"progress\" id=\"progress-{{i}}\" style=\"height: 5px\">\n            <div class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"{'width': plan.progress + '%'}\" aria-valuenow=\"25\"\n              aria-valuemin=\"0\" aria-valuemax=\"100\" mdbTooltip=\"{{plan.progress}}%\" placement=\"top\">\n\n            </div>\n          </div>\n          <!-- If the plan contains any subplan -->\n          <ng-container *ngIf=\"plan.subPlans.length > 0\">\n            <ul class=\"list-group rounded-0 sub-plans-container\" id=\"plan-{{i}}\">\n              <li\n                class=\"d-flex align-items-center list-group-item border-start-0 border-end-0 border-bottom-0 fw-light py-3\"\n                *ngFor=\"let sp of plan.subPlans; let subIndex = index\">\n                <!-- <input mdbCheckbox class=\"form-check-input mt-0 me-2\" type=\"checkbox\" id=\"\" value=\"\"\n                  [checked]=\"sp.isDone\" (change)=\"updateSubPlan($event, i, subIndex)\" /> -->\n\n                <label class=\"checkbox-container me-3\">\n                  <input type=\"checkbox\" [checked]=\"sp.isDone\" (change)=\"updateSubPlan($event, i, subIndex)\">\n                  <span class=\"checkbox-checkmark\"></span>\n                </label>\n                <p class=\"mb-0 text-light\">{{sp.title}}</p>\n                \n                <i (click)=\"deleteSubPlan(plan, subIndex)\" class=\"fas fa-times fa-xs ms-auto text-purple-muted\"></i>\n              </li>\n            </ul>\n          </ng-container>\n        </li>\n      </ul>\n\n      <!-- Add plan button -->\n      <a class=\"add-plan-btn btn btn-sm w-100 position-absolute left-0 end-0 bottom-0\"\n        href=\"calendar/addPlan/{{planDate.year}}/{{planDate.month + 1}}/{{planDate.date}}\" mdbRipple>\n        Add plan\n      </a>\n    </div>\n  </div>\n</div>\n","import { UserService } from 'src/app/services/user/user.service';\nimport { PlanService } from './../../services/plan/plan.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AddSubPlanModalComponent } from '../add-sub-plan-modal/add-sub-plan-modal.component';\nimport { Plan, SubPlan } from 'src/app/models/plan.model';\nimport { PlanDate } from 'src/app/models/plan-date.model';\nimport { Utils } from 'src/app/services/Utils';\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { EditSubPlanModalComponent } from '../edit-sub-plan-modal/edit-sub-plan-modal.component';\nimport { MdbModalRef, MdbModalService } from 'mdb-angular-ui-kit/modal';\n\n@Component({\n  selector: 'app-edit-plan',\n  templateUrl: './edit-plan.component.html',\n  styleUrls: ['../add-plan/add-plan.component.css']\n})\nexport class EditPlanComponent implements OnInit {\n  // Using a modal to add and edit subplans\n  addModalRef: MdbModalRef<AddSubPlanModalComponent>;\n  editModalRef: MdbModalRef<EditSubPlanModalComponent>;\n\n  // Formgroup object to validate the input\n  validationForm: FormGroup;\n\n  // Currently selected date in string\n  selectedDateString: string;\n\n  // Current plan object that the user is looking at\n  selectedPlan = new Plan(null, null, null, null, null, null, null);\n\n  // Entered date input string\n  dateInputString = \"\";\n\n  // Selected date and its string chosen at the right side\n  otherPlanDate: Date;\n  otherDateString: string;\n\n  // The plan on the selected date\n  otherPlan = new PlanDate(null, null, null);\n\n  constructor(private route: ActivatedRoute, private userService: UserService, private planService: PlanService, private utils: Utils, private modalService: MdbModalService) { }\n\n  ngOnInit(): void {\n    // Check if the user is logged in\n    this.userService.isAuthenticated();\n\n    const routeParams = this.route.snapshot.paramMap;   // Get params\n    const planId = routeParams.get('planId');           // Plan ID to get the chosen plan data\n\n    // Get the plan using the plan ID\n    this.planService.getDataById(planId).subscribe(data => {\n      // Get the first plan found\n      let planData = data.body[0];\n\n      // Get the dueDate as the Date object\n      let dueDate = new Date(planData.dueDate);\n\n      // Add a day to the dueDate since the date starts from 0\n      dueDate.setDate(dueDate.getDate());\n\n      // Create a plan object using the data\n      this.selectedPlan = new Plan(planData._id, planData.userId, planData.title, planData.description, dueDate, planData.progress, planData.priority);\n\n      // Add subplans to the plan\n      for (let index = 0; index < planData.subPlans.length; index++) {\n        this.selectedPlan.addSubplan(new SubPlan(planData.subPlans[index].title, planData.subPlans[index].description, planData.subPlans[index].priority, planData.subPlans[index].isDone))\n      }\n\n      // Get the original date string\n      this.dateInputString = this.selectedPlan.dueDate.toISOString().slice(0, 16);\n\n      // Date string to display\n      this.selectedDateString = this.utils.getDateString(this.selectedPlan.dueDate, false);\n\n      // If there is no other selected date to display, set it same as currently selected date\n      if (this.otherPlanDate == null) {\n        this.otherPlanDate = dueDate;\n      }\n\n      // Get the plan on the selected other date\n      this.planService.getDataByDate(this.otherPlanDate).subscribe(res => {\n        this.otherPlan = this.utils.getPlanDate(res.body, this.otherPlanDate);\n      });\n\n      // Get the date string to display\n      this.otherDateString = this.utils.getDateString(this.otherPlanDate, false);\n\n      // Create a FormGroup object passing the initial values\n      this.validationForm = new FormGroup({\n        dueDate: new FormControl(this.dateInputString),\n        priority: new FormControl(this.selectedPlan.priority.toString()),\n        title: new FormControl(this.selectedPlan.title),\n        description: new FormControl(this.selectedPlan.description)\n      });\n    });\n  }\n\n  get dueDate(): AbstractControl {\n    return this.validationForm.get('dueDate');\n  }\n\n  get priority(): AbstractControl {\n    return this.validationForm.get('priority');\n  }\n\n  get title(): AbstractControl {\n    return this.validationForm.get('title');\n  }\n\n  get description(): AbstractControl {\n    return this.validationForm.get('description');\n  }\n\n  /**\n   * Change the date as the user clicks the arrow.\n   *\n   * @param {boolean} isNextDay If true, set the date to the next day.\n   * @memberof EditPlanComponent\n   */\n  changeDate(isNextDay: boolean) {\n    if (isNextDay) {\n      // Add 1 day to the selected other date\n      this.otherPlanDate.setDate(this.otherPlanDate.getDate() + 1);\n    }\n    else {\n      // Subtract 1 day from the selected other date\n      this.otherPlanDate.setDate(this.otherPlanDate.getDate() - 1);\n    }\n    // Refresh the view\n    this.ngOnInit();\n  }\n\n  /**\n   * Get the data from the form and update the plan.\n   *\n   * @param {*} form Edit plan form data to submit.\n   * @memberof EditPlanComponent\n   */\n  submitEditPlan(form) {\n    let data = form.value;\n    this.selectedPlan.title = data.title;\n    this.selectedPlan.description = data.description;\n    this.selectedPlan.dueDate = data.dueDate;\n    this.selectedPlan.priority = data.priority;\n    this.selectedPlan.progress = 0;\n\n    this.selectedPlan.progress = this.utils.calculateProgress(this.selectedPlan);\n\n    // Update the plan using the plan service\n    this.planService.updatePlan(this.selectedPlan).subscribe(data => {\n      console.log('done!');\n      \n      // Refresh the view\n      // this.ngOnInit();\n\n      let currDate = new Date().toISOString().split('T')[0];\n      // Go back to the calendar page\n      window.location.href = `calendar/date/${currDate.split('-')[0]}/${currDate.split('-')[1]}`;\n    });\n  }\n\n  /**\n   * Open the Add subplan modal.\n   *\n   * @memberof EditPlanComponent\n   */\n  openAddModal() {\n    // Open the modal\n    this.addModalRef = this.modalService.open(AddSubPlanModalComponent, {\n      modalClass: 'modal-dialog-centered'\n    });\n\n    // When close the modal, get the data on the modal\n    this.addModalRef.onClose.subscribe((data: any) => {\n      if (data) {\n        let subPlanFromJson = JSON.parse(JSON.stringify(data));\n\n        subPlanFromJson.modalIsDone = subPlanFromJson.modalIsDone === null ? false: subPlanFromJson.modalIsDone\n        \n        // Using the data, create a new subplan\n        let subplan = new SubPlan(subPlanFromJson.modalTitle, subPlanFromJson.modalDescription, subPlanFromJson.modalPriority, subPlanFromJson.modalIsDone);\n\n        // Push the subplan to the list\n        this.selectedPlan.subPlans.push(subplan);\n      }\n    });\n  }\n\n  /**\n   * Open the Edit Subplan modal.\n   *\n   * @param {*} index Index of the subplan to edit.\n   * @memberof EditPlanComponent\n   */\n  openEditModal(index) {\n    // Get the subplan by index\n    let subPlan = this.selectedPlan.subPlans[index];\n\n    // Set the subplan using the static method (data will be used in the modal)\n    Utils.setSubPlan(subPlan);\n\n    // Open the modal\n    this.editModalRef = this.modalService.open(EditSubPlanModalComponent, {\n      modalClass: 'modal-dialog-centered'\n    });\n\n    // When close the modal, get the data on the modal\n    this.editModalRef.onClose.subscribe((data: any) => {\n\n      if (data == 0) {\n        this.selectedPlan.subPlans.splice(index, 1);\n      }\n      else if (data) {\n        let subPlanFromJson = JSON.parse(JSON.stringify(data));\n\n        subPlanFromJson.modalIsDone = subPlanFromJson.modalIsDone === null ? false: subPlanFromJson.modalIsDone\n\n        // Create a subplan object using the json data\n        let subplan = new SubPlan(subPlanFromJson.modalTitle, subPlanFromJson.modalDescription, subPlanFromJson.modalPriority, subPlanFromJson.modalIsDone);\n\n        // Push the subplan to the list\n        this.selectedPlan.subPlans[index] = subplan;\n      }\n    });\n  }\n\n  /**\n   * Delete a SubPlan by index from the array of the subplan.\n   *\n   * @param {number} spIndex Index of the subplan to delete.\n   * @memberof EditPlanComponent\n   */\n  deleteSubPlan(spIndex: number) {\n    // Remove the subplan item from the array using the index\n    this.selectedPlan.subPlans.splice(spIndex, 1);\n\n    // Update the plan\n    this.planService.updatePlan(this.selectedPlan).subscribe(data => {\n    });\n  }\n\n  /**\n   * Navigate to the selected other date's edit plan page when the text is clicked.\n   *\n   * @param {number} index Index of the plan to edit.\n   *\n   * @memberof AddPlanComponent\n   */\n  navigateToOtherPlan(index: number) {\n    let otherPlanToEdit = this.otherPlan.plans[index];\n\n    // If the IDs of the plans to edit are different, navigate to the chosen plan's edit page\n    if (otherPlanToEdit._id !== this.selectedPlan._id) {\n      window.location.href = `calendar/editPlan/${otherPlanToEdit._id}`;\n    }\n  }\n}\n","<div class=\"w-100 h-100\" id=\"add-plan-container\">\n  <div class=\"shadow-5-strong overflow-hidden d-flex\" id=\"add-plan-card\">\n    <!-- Edit Plan form -->\n    <form id=\"card-form\" *ngIf=\"validationForm\" class=\"px-lg-5 px-4 pb-5 pt-4\" [formGroup]=\"validationForm\"\n      (ngSubmit)=\"submitEditPlan(validationForm)\">\n      <!-- date string -->\n      <h4 class=\"mb-4\">{{selectedDateString}}</h4>\n      <div class=\"d-lg-flex flex-row-reverse\">\n        <div class=\"ms-lg-3\">\n          <p class=\"mb-1 fw-normal\">Priority</p>\n          <!-- radio container -->\n          <div class=\"d-flex position-relative ms-1 mt-2\">\n\n            <label class=\"radio-container fw-light me-3\">High\n              <input [checked]=\"selectedPlan.priority == 3\" type=\"radio\" id=\"radioHigh\" value=\"3\" class=\"mt-1 priority\"\n                formControlName=\"priority\" required>\n              <span class=\"radio-checkmark\"></span>\n            </label>\n\n            <label class=\"radio-container fw-light me-3\">Medium\n              <input [checked]=\"selectedPlan.priority == 2\" type=\"radio\" id=\"radioMid\" value=\"2\" class=\"mt-1 priority\"\n                formControlName=\"priority\" required>\n              <span class=\"radio-checkmark\"></span>\n            </label>\n\n            <label class=\"radio-container fw-light\">Low\n              <input [checked]=\"selectedPlan.priority == 1\" type=\"radio\" id=\"radioLow\" value=\"1\" class=\"mt-1 priority\"\n                formControlName=\"priority\" required>\n              <span class=\"radio-checkmark\"></span>\n            </label>\n          </div>\n          <!-- form control error message -->\n          <span class=\"priority error-msg mt-1\">Priority is required.</span>\n        </div>\n        <div class=\"mt-2 mt-lg-0\">\n          <!-- change the label color -->\n          <p class=\"fw-normal mb-1\">Due date</p>\n          <!-- due date form control -->\n          <mdb-form-control>\n            <input mdbInput type=\"datetime-local\" id=\"dueDate\" class=\"my-0 dueDate light-calendar-icon\" formControlName=\"dueDate\"\n              required />\n          </mdb-form-control>\n          <span class=\"dueDate error-msg mt-1\">Due date is required.</span>\n        </div>\n      </div>\n\n      <!-- title form control -->\n      <mdb-form-control>\n        <input mdbInput type=\"text\" id=\"inputTitle\" class=\"title mt-2\" formControlName=\"title\" placeholder=\"Plan title\"\n          required />\n      </mdb-form-control>\n      <span class=\"title error-msg mt-1\">Title is required.</span>\n      <!-- description form control -->\n      <mdb-form-control>\n        <textarea mdbInput type=\"text\" id=\"inputDesc\" rows=\"4\" class=\"mt-2\" formControlName=\"description\"\n          placeholder=\"Description\"></textarea>\n      </mdb-form-control>\n      <!-- subplan container -->\n      <p class=\"mb-1 mt-3 fw-normal\">Sub-plans</p>\n\n      <div *ngIf=\"selectedPlan.subPlans.length > 0; else emptySubplan\">\n        <!-- for loop of subplan -->\n        <div *ngFor=\"let sp of selectedPlan.subPlans; let subIndex = index\" (click)=\"openEditModal(subIndex)\"\n          class=\"sub-plan-item shadow-3 p-3 rounded mb-2 fw-light text-break\">\n          <!-- subplan title -->\n          <h6 class=\"d-flex align-items-center mb-1 fw-light text-light\">\n            <span [ngClass]=\"sp.isDone ? 'text-decoration-line-through' : ''\">{{sp.title}}</span>\n            <i (click)=\"deleteSubPlan(subIndex)\" class=\"fas fa-times fa-xs ms-auto\"></i>\n          </h6>\n          <p class=\"priority-text fw-light mb-0 text-light\">\n            PRIORITY:\n            <span class=\"fw-normal\" [ngClass]=\"['text-success', 'text-warning', 'text-danger'][sp.priority - 1]\">\n              {{['LOW','MID', 'HIGH'][sp.priority - 1]}}\n            </span>\n          </p>\n          <!-- subplan description -->\n          <p *ngIf=\"sp.description != ''\" class=\"mb-0 fw-light small text-purple-muted\">{{sp.description}}\n          </p>\n        </div>\n      </div>\n      <ng-template #emptySubplan>\n        <div class=\"rounded d-flex justify-content-center py-5 empty-subplan-container fw-light small\">\n          There is no sub-plan.\n        </div>\n      </ng-template>\n\n      <!-- button container -->\n      <div class=\"pt-5 d-lg-flex\">\n        <button type=\"submit\" class=\"btn btn-sm text-white fw-light w-100 py-2 mt-2 me-3 btn-save\"\n          mdbRipple>Save</button>\n        <button type=\"button\" class=\"btn btn-sm text-white fw-light w-100 py-2 mt-2 me-3\" id=\"btn-sub-plan\"\n          (click)=\"openAddModal()\" mdbRipple>Add sub-plan</button>\n        <a class=\"btn btn-sm text-white fw-light w-100 py-2 mt-2\" id=\"btn-cancel\" href=\"/calendar\" mdbRipple>Cancel</a>\n      </div>\n    </form>\n    <!-- form ends -->\n\n    <!-- other date plan container -->\n    <div class=\"w-100 p-4 other-plan-container\">\n      <span class=\"d-block text-center small fw-light mb-1\">Other plans on</span>\n      <h4 class=\"mb-4 text-center d-flex justify-content-between align-items-center\">\n        <i class=\"fas fa-chevron-left\" (click)=\"changeDate(false)\"></i>\n        <span class=\"shadow-sm p-1 rounded\">\n          {{otherDateString}}\n        </span>\n        <i class=\"fas fa-chevron-right\" (click)=\"changeDate(true)\"></i>\n      </h4>\n      <!-- other date plans -->\n      <div *ngIf=\"otherPlan.planCount > 0; else elseTemplate\" id=\"other-plan-item-container\" class=\"pe-1\">\n        <div *ngFor=\"let plan of otherPlan.plans; let i = index\" (click)=\"navigateToOtherPlan(i)\"\n          class=\"rounded shadow overflow-hidden cursor-pointer\" [ngClass]=\"i == otherPlan.plans.length - 1? '' : 'mb-3'\">\n          <!-- main plan container -->\n          <div class=\"p-3 other-plan-item\">\n            <!-- other plan title -->\n            <h6 class=\"d-flex align-items-center mb-1 fw-light text-light\">\n              <span [ngClass]=\"plan.progress == 100 ? 'text-decoration-line-through' : ''\">{{plan.title}}</span>\n            </h6>\n            <p class=\"priority-text fw-light mb-0 text-light\">\n              PRIORITY:\n              <span class=\"fw-normal\" [ngClass]=\"['text-success', 'text-warning', 'text-danger'][plan.priority - 1]\">\n                {{['LOW','MID', 'HIGH'][plan.priority - 1]}}\n              </span>\n            </p>\n            <!-- other plan description -->\n            <p *ngIf=\"plan.description != ''\" class=\"mb-0 fw-light small text-purple-muted\">\n              {{plan.description}}</p>\n          </div>\n          <!-- subplan container -->\n          <div *ngFor=\"let sp of plan.subPlans\" class=\"p-3 other-sub-plan-item\">\n            <!-- other plan title -->\n            <h6 class=\"mb-0\"><i class=\"fas fa-exclamation me-2\"\n                [ngClass]=\"['text-success', 'text-warning', 'text-danger'][sp.priority - 1]\">\n              </i>\n              <span [ngClass]=\"sp.isDone ? 'text-decoration-line-through' : ''\">{{sp.title}}</span>\n            </h6>\n          </div>\n        </div>\n      </div>\n      <ng-template #elseTemplate>\n        <p class=\"mb-0 py-5 fw-light text-center\">There is no plan on this day.</p>\n      </ng-template>\n    </div>\n  </div>\n</div>\n","import { Utils } from 'src/app/services/Utils';\nimport { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\nimport { Plan, SubPlan } from 'src/app/models/plan.model';\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\n\n@Component({\n  selector: 'app-edit-sub-plan-modal',\n  templateUrl: './edit-sub-plan-modal.component.html',\n  styleUrls: ['../add-plan/add-plan.component.css', './edit-sub-plan-modal.component.css']\n})\nexport class EditSubPlanModalComponent implements OnInit {\n  plan: Plan;\n  validationForm: FormGroup;\n  subPlan: SubPlan;\n\n  constructor(public modalRef: MdbModalRef<EditSubPlanModalComponent>, private utils: Utils) { }\n\n  ngOnInit(): void {\n    // Get current subplan using the Utils' static method\n    this.subPlan = Utils.getSubPlan();\n    if (this.subPlan) {\n      // Create a new object of FormGroup using the subplan data\n      this.validationForm = new FormGroup({\n        modalPriority: new FormControl(this.subPlan.priority.toString()),\n        modalTitle: new FormControl(this.subPlan.title),\n        modalDescription: new FormControl(this.subPlan.description),\n        modalIsDone: new FormControl(this.subPlan.isDone)\n      });\n    }\n  }\n\n  get modalPriority(): AbstractControl {\n    return this.validationForm.get('modalPriority');\n  }\n\n  get modalTitle(): AbstractControl {\n    return this.validationForm.get('modalTitle');\n  }\n\n  get modalDescription(): AbstractControl {\n    return this.validationForm.get('modalDescription');\n  }\n\n  get modalIsDone(): AbstractControl {\n    return this.validationForm.get('modalIsDone');\n  }\n\n  /**\n   * Check if the required inputs are filled and display error message for the empty inputs.\n   *\n   * @param {*} formData Form data to check for the empty input.\n   * @return {*}  {boolean} Return true if all required inputs are valid.\n   * @memberof AddPlanComponent\n   */\n  validateInputs(formData: any): boolean {\n    // Get input elements\n    let titleInput = <HTMLInputElement>document.querySelector('#modal-inputTitle');\n\n    // Get error message elements\n    let titleError = <HTMLElement>document.querySelector('.title.modal-error-msg');\n    let priorityError = <HTMLElement>document.querySelector('.priority.modal-error-msg');\n\n    // If data's property is null or empty, store false\n    let isTitleValid = formData.modalTitle != null && formData.modalTitle !== '';\n    let isPriorityValid = formData.modalPriority != null && formData.modalPriority !== '' && !isNaN(formData.modalPriority);\n\n    // Check whether the input is valid and add or remove the class 'invalid'\n    this.utils.changeInputStatus(titleInput, titleError, isTitleValid);\n    this.utils.changeInputStatus(null, priorityError, isPriorityValid);\n\n    // If any of input is invalid, return false\n    if (!isTitleValid || !isPriorityValid)\n      return false;\n    // Otherwise, return true\n    return true;\n  }\n\n  /**\n   * Submit the updated value of the subplan form and call the close method.\n   *\n   * @param {*} data form data to submit.\n   * @memberof EditSubPlanModalComponent\n   */\n  submitEditSubPlan(data) {\n    // Store the priority as an integer\n    data.value.priority = parseInt(data.value.priority);\n\n    // If the form is valid, close the modal sending the data\n    if (this.validateInputs(data.value)) {\n      this.close(data.value);\n    }\n  }\n\n  /**\n   * Send 0 when the modal is closed to delete the subplan.\n   *\n   * @memberof EditSubPlanModalComponent\n   */\n  deleteAndClose() {\n    this.modalRef.close(0);\n  }\n\n  /**\n   * Close the modal passing the data.\n   *\n   * @param {*} data Data to send when closing the modal.\n   * @memberof EditSubPlanModalComponent\n   */\n  close(data): void {\n    if (data) {   // if the data exists, close the modal sending passed data\n      this.modalRef.close(data);\n    }\n  }\n}\n","<div class=\"modal-header justify-content-center pt-0 px-0\">\n  <h4 class=\"modal-title\" id=\"exampleModalLabel\">Edit a Sub-plan</h4>\n</div>\n<!-- edit subplan form -->\n<form class=\"modal-body px-0\" id=\"sub-plan-form\" [formGroup]=\"validationForm\"\n  (ngSubmit)=\"submitEditSubPlan(validationForm)\">\n  <!-- radios -->\n  <div class=\"mb-3\">\n    <p class=\"mb-1 fw-normal text-purple-muted\">Priority</p>\n    <div class=\"d-flex mb-2 position-relative\">\n      <!-- radio container -->\n      <label class=\"radio-container fw-light me-3\">High\n        <input type=\"radio\" id=\"modal-radioHigh\" value=\"3\" [checked]=\"subPlan.priority == 3\" class=\"mt-1 priority\"\n          formControlName=\"modalPriority\" required>\n        <span class=\"radio-checkmark\"></span>\n      </label>\n\n      <label class=\"radio-container fw-light me-3\">Medium\n        <input type=\"radio\" id=\"modal-radioMid\" value=\"2\" [checked]=\"subPlan.priority == 2\" class=\"mt-1 priority\"\n          formControlName=\"modalPriority\" required>\n        <span class=\"radio-checkmark\"></span>\n      </label>\n\n      <label class=\"radio-container fw-light\">Low\n        <input type=\"radio\" id=\"modal-radioLow\" value=\"1\" [checked]=\"subPlan.priority == 1\" class=\"mt-1 priority\"\n          formControlName=\"modalPriority\" required>\n        <span class=\"radio-checkmark\"></span>\n      </label>\n\n      <!-- checkbox for isDone -->\n      <div class=\"ms-auto\">\n        <label class=\"checkbox-container\" mdbTooltip=\"Mark as done\" placement=\"top\">\n          <input type=\"checkbox\" value=\"true\" formControlName=\"modalIsDone\">\n          <span class=\"checkbox-checkmark\"></span>\n        </label>\n      </div>\n      <!-- form control error message -->\n      <span class=\"priority modal-error-msg mt-1\">Priority is required.</span>\n    </div>\n  </div>\n  <!-- title -->\n  <mdb-form-control class=\"mb-2\">\n    <input mdbInput type=\"text\" id=\"modal-inputTitle\" class=\"title\" formControlName=\"modalTitle\"\n      placeholder=\"Plan title\" required />\n  </mdb-form-control>\n  <span class=\"title modal-error-msg mt-1\">Title is required.</span>\n  <!-- description -->\n  <mdb-form-control>\n    <textarea mdbInput type=\"text\" id=\"modal-inputDesc\" rows=\"4\" class=\"\" formControlName=\"modalDescription\"\n      placeholder=\"Description\"></textarea>\n  </mdb-form-control>\n</form>\n<!-- button container -->\n<div class=\"modal-footer\">\n  <button mdbRipple class=\"btn text-light btn-save\" form=\"sub-plan-form\" type=\"submit\">Edit</button>\n  <button mdbRipple class=\"btn text-light btn-delete\" form=\"sub-plan-form\" (click)=\"deleteAndClose()\">Delete</button>\n  <button mdbRipple class=\"btn text-light btn-cancel\" type=\"button\" (click)=\"modalRef.close()\">\n    Cancel\n  </button>\n</div>\n","import { UserService } from 'src/app/services/user/user.service';\nimport { PlanService } from './../../services/plan/plan.service';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Plan } from 'src/app/models/plan.model';\nimport { PlanDate } from 'src/app/models/plan-date.model';\nimport { Utils } from 'src/app/services/Utils';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-monthly-calendar',\n  templateUrl: './monthly-calendar.component.html',\n  styleUrls: ['./monthly-calendar.component.css']\n})\n\nexport class MonthlyCalendarComponent implements OnInit {\n  dateOffset: number;\n  today: Date;\n  subPlans: Plan[] = [];\n  planDates: PlanDate[] = [];\n  numOfWeeks: number;\n  numOfDays: number;\n  selectedDate: number;\n\n  isOpened: boolean;\n  calendarWrapper: HTMLElement;\n\n  monthString: string;\n\n  @Output() planEmitter = new EventEmitter<PlanDate>();\n  @Output() changeMonthEmitter = new EventEmitter<Date>();\n  @Input() paramYear: number;\n  @Input() paramMonth: number;\n\n  constructor(private planService: PlanService, private userService: UserService, private utils: Utils, private router: Router) { }\n\n  ngOnInit(): void {\n    // Check if the user is logged in\n    this.userService.isAuthenticated();\n\n    this.today = new Date(this.paramYear, this.paramMonth - 1, 1);\n\n    // Set the month string\n    this.monthString = this.today.toLocaleString('default', { month: 'long' });\n\n    let firstDayName = new Date(this.today.getFullYear(), this.today.getMonth(), 1).toLocaleString(\"default\", { weekday: \"long\" });\n\n    this.calendarWrapper = document.getElementById('calendar-wrapper');\n\n    // Find the offset of the date using the month's first day name\n    this.dateOffset = Utils.fullDays.indexOf(firstDayName);\n\n    // Number of days in the month\n    this.numOfDays = new Date(this.today.getFullYear(), this.today.getMonth() + 1, 0).getDate();\n\n    // Number of weeks in the month\n    this.numOfWeeks = Math.ceil((this.dateOffset + this.numOfDays) / 7);\n\n    // Get all PlanDate objects in the month of today\n    this.planService.getDataByMonth(this.today)\n      .subscribe(data => {\n        this.planDates = this.utils.getPlanDatesInMonth(data.body, this.today.getFullYear(), this.today.getMonth());\n      });\n  }\n\n  /**\n   * Open the detail-box of the selected date's plans.\n   *\n   * @param {number} date Selected date in the month that needs to be displayed.\n   * @param {boolean} [isValid=true] The cell has the valid date. The cell with an empty date is invalid.\n   * @memberof MonthlyCalendarComponent\n   */\n  openDetail(date: number, isValid: boolean = true) {\n    if (isValid) {\n      let isOpened = this.calendarWrapper.classList.contains('detail-opened');\n      let prevCell = document.getElementById('cell-' + this.selectedDate);\n      let cell = document.getElementById('cell-' + date);\n\n      // If the cell does not contain hover class (invalid cell), return\n      if (!cell.classList.contains('hover')) {\n        return;\n      }\n\n      // If the detail-box is already opened and selected the same date, close the detail-box\n      if (isOpened && this.selectedDate === date) {\n        this.selectedDate = date;\n        this.closeDetail();\n      }\n      else {\n        this.selectedDate = date;\n        // Emit the selected PlanDate data (it will be used in the detail-box component)\n        this.planEmitter.emit(this.planDates[this.selectedDate - 1]);\n        this.utils.changeDetailBox(true, prevCell, cell);\n      }\n    }\n  }\n\n  /**\n   * Close the detail-box.\n   *\n   * @memberof MonthlyCalendarComponent\n   */\n  closeDetail() {\n    let isOpened = this.calendarWrapper.classList.contains('detail-opened');\n\n    // If the detail-box was already opened, close it.\n    if (isOpened) {\n      this.utils.changeDetailBox(false, null, null);\n    }\n  }\n\n  /**\n   * Change the month depending on the direction of the arrow clicked.\n   *\n   * @param {boolean} isNext If isNext is true, add a month to the original month\n   * otherwise, subtract a month from it.\n   * @memberof MonthlyCalendarComponent\n   */\n  changeMonth(isNext: boolean) {\n    this.closeDetail();\n\n    let monthToAdd = -1;\n    // If isNext is true, make the monthToAdd value positive\n    if (isNext) {\n      monthToAdd *= -1;\n    }\n\n    let month = this.today.getMonth() + monthToAdd + 1;\n\n    let date = new Date(this.today.getFullYear(), month, 1);\n    this.changeMonthEmitter.emit(date);\n\n    this.utils.redirectTo(`calendar/date/${this.today.getFullYear()}/${month}`);\n  }\n\n  /**\n   * Go to the Edit page of the selected plan.\n   *\n   * @param {Plan} plan Plan object to edit.\n   * @memberof MonthlyCalendarComponent\n   */\n  openEditPage(plan: Plan) {\n    this.closeDetail();\n    window.location.href = `calendar/editPlan/${plan._id}`;\n  }\n}\n","<h1 class=\"text-center fw-light mt-5 mb-3 d-flex justify-content-between align-items-center\" id=\"month-title\">\n  <!-- arrow buttons to change the month -->\n  <i (click)=\"changeMonth(false)\" class=\"fas fa-chevron-left\"></i>\n  {{monthString}}\n  <i (click)=\"changeMonth(true)\" class=\"fas fa-chevron-right\"></i>\n</h1>\n<!-- calendar table starts -->\n<table class=\"table table-bordered mx-auto\" id=\"calendar-table\">\n  <!-- table header -->\n  <thead>\n    <tr>\n      <!-- Day strings for different size of screen -->\n      <th class=\"p-2 text-center\">\n        <span class=\"date-long d-none d-md-block\">Sun</span>\n        <span class=\"date-short fw-normal small d-block d-md-none\">S</span>\n      </th>\n      <th class=\"p-2 text-center\">\n        <span class=\"date-long d-none d-md-block\">Mon</span>\n        <span class=\"date-short fw-normal small d-block d-md-none\">M</span>\n      </th>\n      <th class=\"p-2 text-center\">\n        <span class=\"date-long d-none d-md-block\">Tue</span>\n        <span class=\"date-short fw-normal small d-block d-md-none\">T</span>\n      </th>\n      <th class=\"p-2 text-center\">\n        <span class=\"date-long d-none d-md-block\">Wed</span>\n        <span class=\"date-short fw-normal small d-block d-md-none\">W</span>\n      </th>\n      <th class=\"p-2 text-center\">\n        <span class=\"date-long d-none d-md-block\">Thu</span>\n        <span class=\"date-short fw-normal small d-block d-md-none\">T</span>\n      </th>\n      <th class=\"p-2 text-center\">\n        <span class=\"date-long d-none d-md-block\">Fri</span>\n        <span class=\"date-short fw-normal small d-block d-md-none\">F</span>\n      </th>\n      <th class=\"p-2 text-center\">\n        <span class=\"date-long d-none d-md-block\">Sat</span>\n        <span class=\"date-short fw-normal small d-block d-md-none\">S</span>\n      </th>\n    </tr>\n  </thead>\n  <!-- table body -->\n  <tbody>\n    <!-- repeat the week row 6 times -->\n    <tr *ngFor=\"let week of [].constructor(6); let weekIndex = index;\"\n      [ngClass]=\"weekIndex >= numOfWeeks? 'd-none': ''\">\n      <!-- repeat the day cell 7 times and caluclate the day -->\n      <td *ngFor=\"let day of [].constructor(7); let dayIndex = index;\" class=\"p-2 position-relative\"\n        [ngClass]=\"(dayIndex + 1) + (weekIndex * 7) > dateOffset && (dayIndex - dateOffset + 1) + (weekIndex * 7) < numOfDays + 1 ? 'hover' : ''\"\n        id=\"cell-{{(dayIndex - dateOffset + 1) + (weekIndex * 7)}}\"\n        (click)=\"openDetail((dayIndex - dateOffset + 1) + (weekIndex * 7), (dayIndex + 1) + (weekIndex * 7) > dateOffset)\">\n        <!-- declare a date variable -->\n        <ng-container *ngVar=\"(dayIndex - dateOffset + 1) + (weekIndex * 7) as varDate\">\n          <!-- container for the object with no plan -->\n          <ng-container\n            *ngIf=\"weekIndex == 0 && dayIndex < dateOffset || varDate > planDates.length; else elseTemplate\">\n            <span></span>\n          </ng-container>\n          <ng-template #elseTemplate>\n            <div class=\"d-flex align-items-center\">\n              <!-- date -->\n              <p class=\"mb-0\" [ngClass]=\"planDates[varDate - 1].plans.length > 0 ? 'fw-bold date-plan': ''\">\n                {{varDate}}\n              </p>\n            </div>\n            <!-- list for the plans -->\n            <ul class=\"mt-1 mb-0 px-2 plan-list d-md-block d-none\">\n              <ng-container *ngFor=\"let p of planDates[varDate - 1].plans; let i = index\">\n                <!-- Display up to 3 plans -->\n                <li *ngIf=\"planDates[varDate - 1].plans.length > 0\"\n                  [ngClass]=\"p.progress == 100 ? 'text-decoration-line-through' : ''\"\n                  class=\"plan-item text-truncate small\">\n                  {{p.title}}\n                </li>\n              </ng-container>\n            </ul>\n          </ng-template>\n        </ng-container>\n      </td>\n    </tr>\n  </tbody>\n</table>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HeaderComponent } from './header/header.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { FontAwesomeModule } from \"@fortawesome/angular-fontawesome\";\nimport { MdbRippleModule } from 'mdb-angular-ui-kit/ripple';\n\n\n@NgModule({\n  declarations: [HeaderComponent, FooterComponent],\n  imports: [\n    CommonModule,\n    FontAwesomeModule,\n    MdbRippleModule,\n  ],\n  exports: [HeaderComponent, FooterComponent]\n})\nexport class CoreModule {\n}\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<footer class=\"bg-dark text-white text-center text-lg-start float-end\">\n  <!-- Grid container -->\n  <div class=\"container\">\n    <!--Grid row-->\n    <div class=\"row justify-content-center\">\n      <!--Grid column-->\n      <div class=\"col-lg-3 col-md-6 mb-4 mb-md-0\">\n        <!-- <h5 class=\"text-uppercase\">Connect with me</h5> -->\n\n        <div class=\"d-flex justify-content-center mb-3\">\n          <a href=\"https://www.linkedin.com/in/heesoo-lim/\" class=\"rounded-circle contact-icon\">\n            <i class=\"fab fa-linkedin-in text-dark\"></i>\n          </a>\n          <a href=\"https://github.com/HeesooLim\" class=\"rounded-circle contact-icon\">\n            <i class=\"fab fa-github-alt text-dark\"></i>\n          </a>\n          <a href=\"mailto:heesoo474@gmail.com\" class=\"rounded-circle contact-icon\">\n            <i class=\"fas fa-envelope text-dark\"></i>\n          </a>\n          <a href=\"tel:123-345-4353\" class=\"rounded-circle contact-icon\">\n            <i class=\"fas fa-phone text-dark\"></i>\n          </a>\n        </div>\n        <p class=\"text-center info-line mb-1\">\n          <a href=\"/login\" class=\"text-white\">Login</a>\n          <span class=\"text-muted mx-1\">•</span>\n          <a href=\"/register\" class=\"text-white\">Register</a>\n        </p>\n        <p class=\"text-white-50 fw-light text-center copyright-line mb-0\">© 2022 Heesoo Lim</p>\n      </div>\n      <!--Grid column-->\n    </div>\n    <!--Grid row-->\n  </div>\n  <!-- Grid container -->\n</footer>","import { UserService } from 'src/app/services/user/user.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Utils } from 'src/app/services/Utils';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  // Variables that determines the navigation bar's background colour\n  isMenuVisible: boolean;\n  isScrollDowned: boolean;\n\n  // user's first name\n  loginName: string;\n  isUserLoggedIn: boolean;\n\n  todayYear: number;\n  todayMonth: number;\n  todayDate: number;\n\n  constructor(private utils: Utils, private userService: UserService, private router: Router) {\n    // Subscribe to the BehaviorSubject to check if the user is currently logged in\n    this.userService.isUserLoggedIn.subscribe(value => {\n      this.isUserLoggedIn = value.loggedIn;\n      this.loginName = value.user;\n    });\n    this.todayYear = new Date().getFullYear();\n    this.todayMonth = new Date().getMonth() + 1;\n    this.todayDate = new Date().getDate();\n  }\n\n  ngOnInit() {\n    // Get navbar element to change its colour when scroll down\n    let navbar = <HTMLElement>document.querySelector('nav.navbar');\n\n    // When the user scrolls down or up\n    window.onscroll = () => {\n      // If current scroll bar's position is greater than or equal to the navbar's height\n      if (document.body.scrollTop * 3 >= navbar.clientHeight || document.documentElement.scrollTop * 3 >= navbar.clientHeight) {\n        // Set the value to make the background dark\n        this.isScrollDowned = true;\n      }\n      else {\n        // Set the value to make the background dark\n        this.isScrollDowned = false;\n      }\n      // Change the navigation bar colour based on the scroll position and the visibility of the nav menu\n      this.changeNavbarColorDark(this.isScrollDowned || this.isMenuVisible);\n    };\n  }\n\n  /**\n   * Method executed when the menu button is clicked in a small screen.\n   * - Change the background of the navbar.\n   * - Open or close the navbar menu.\n   *\n   * @memberof HeaderComponent\n   */\n  onClickNavbarMenu() {\n    // nav menu to change visibility\n    let navMenu = document.querySelector('#navbarSupportedContent');\n\n    // Change the visibility of the menu\n    this.utils.toggleCollapse(navMenu);\n\n    // Set the value if the nav menu is visible\n    this.isMenuVisible = document.querySelector('#navbarSupportedContent').classList.contains('show');\n\n    // Change the navigation bar colour based on the scroll position and the visibility of the nav menu\n    this.changeNavbarColorDark(this.isScrollDowned || this.isMenuVisible);\n  }\n\n  /**\n   * Change the colour of the navbar to dark or transparent\n   *\n   * @param {boolean} isDark If this value is true, navbar's colour is changed to dark.\n   * @memberof HeaderComponent\n   */\n  changeNavbarColorDark(isDark: boolean) {\n    // Get navbar element to change its colour when scroll down\n    let navbar = <HTMLElement>document.querySelector('nav.navbar');\n\n    // If is dark, change its colour to dark\n    if (isDark) {\n      navbar.classList.add(\"bg-dark\");\n      navbar.classList.remove(\"bg-transparent\");\n    }\n    else {\n      navbar.classList.remove(\"bg-dark\");\n      navbar.classList.add(\"bg-transparent\");\n    }\n  }\n\n  logout() {\n    this.userService.tryLogout();\n  }\n}\n","<!-- Navbar -->\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-transparent shadow-0 fixed-top\">\n  <!-- Container wrapper -->\n  <div class=\"container-fluid\">\n    <!-- Navbar brand -->\n    <a class=\"navbar-brand\" href=\"/\">\n      <img src=\"assets\\img\\logo-with-bg.png\" alt=\"logo of Planify\" width=\"100\">\n    </a>\n\n    <!-- Toggle button -->\n    <button class=\"navbar-toggler\" type=\"button\" (click)=\"onClickNavbarMenu()\" aria-expanded=\"false\"\n      aria-label=\"Toggle navigation\">\n      <i class=\"fas fa-bars\"></i>\n    </button>\n\n    <!-- Collapsible wrapper -->\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" mdbCollapse>\n      <!-- Left links -->\n      <ul class=\"navbar-nav ms-auto mb-2 mb-lg-0 align-items-center\">\n        <li class=\"nav-item\">\n          <a class=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" href=\"calendar/date/{{todayYear}}/{{todayMonth}}\">Calendar</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">\n            {{loginName}}\n          </a>\n        </li>\n        <li class=\"nav-item ms-lg-4\">\n          <a *ngIf=\"!isUserLoggedIn\" class=\"btn btn-sm btn-outline-warning\" href=\"login\" aria-current=\"page\"\n            mdbRipple>Login</a>\n          <button *ngIf=\"isUserLoggedIn\" class=\"btn btn-sm btn-outline-warning\" (click)=\"logout()\" aria-current=\"page\"\n            mdbRipple>Logout</button>\n        </li>\n      </ul>\n    </div>\n    <!-- Collapsible wrapper -->\n  </div>\n  <!-- Container wrapper -->\n</nav>\n<!-- Navbar -->\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.css']\n})\nexport class ErrorComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>error works!</p>\n","import { UserService } from '../services/user/user.service';\nimport { Component, OnInit } from '@angular/core';\nimport { User } from '../models/user.model';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  user: User;\n  userName: string;\n\n  todayYear: number;\n  todayMonth: number;\n  todayDate: number;\n\n  constructor(private userService: UserService) {\n    this.todayYear = new Date().getFullYear();\n    this.todayMonth = new Date().getMonth() + 1;\n    this.todayDate = new Date().getDate();\n  }\n\n  ngOnInit() {\n    // Check if the user is logged in or not in the homePage\n    this.userService.isAuthenticated();\n\n    this.userService.getData()\n      .subscribe(req => {\n        console.log('we got this: ', req.body);\n        this.user = req.body;\n        this.userName = this.user.firstName;\n      });\n  }\n\n}\n","<div class=\"w-100 vh-100 d-flex align-items-center\" id=\"home-wrapper\">\n  <div class=\"row justify-content-end w-100 mx-0\">\n    <div id=\"hero-bg-half\" class=\"col-lg-5 col-sm-8 d-flex align-items-center justify-content-center\">\n      <div class=\"\">\n        <h1 class=\"fw-light\">\n          Hi {{userName}}!\n        </h1>\n        <h4 class=\"fw-lighter\">Ready to start your plan?</h4>\n        <a href=\"calendar/date/{{todayYear}}/{{todayMonth}}\" class=\"btn btn-lg font-weight-light mt-4\" id=\"hero-button\" mdbRipple>Build Plan</a>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Plan } from \"./plan.model\";\n\nexport class PlanDate {\n  year: number;\n  month: number;\n  date: number;\n  dateName: string;\n  plans: Plan[];\n  planCount: number = 0;\n\n  constructor(year: number, month: number, date: number, plans: Plan[] = []) {\n    this.year = year;\n    this.month = month;\n    this.date = date;\n    this.plans = plans;\n\n    if (plans.length > 0) {\n      this.planCount = plans.length;\n    }\n  }\n\n  addPlan(plan: Plan) {\n    this.planCount++;\n    // this.planCount += plan.subPlans.length;\n    this.plans.push(plan);\n  }\n}\n","export class Plan {\n  _id: string;\n  userId: string;\n  // date: Date;\n  title: string;\n  description: string;\n  dueDate: Date;\n  progress: number;\n  priority: number;\n  subPlans: SubPlan[];\n\n  constructor(id:string, userId: string, title: string, description: string, dueDate: Date, progress: number, priority: number) {\n    this._id = id;\n    this.userId = userId;\n    // this.date = date;\n    this.title = title;\n    this.description = description;\n    this.dueDate = dueDate;\n    this.progress = progress;\n    this.priority = priority;\n    this.subPlans = [];\n  }\n\n  setProgress(progress: number) {\n    this.progress = progress;\n  }\n\n  addSubplan(subPlan: SubPlan) {\n    this.subPlans.push(subPlan);\n  }\n\n  addSubplans(subPlans: SubPlan[]) {\n    this.subPlans.push(...subPlans);\n  }\n}\n\nexport class SubPlan {\n  title: string;\n  description: string;\n  priority: number;\n  isDone: boolean;\n\n  constructor(title: string, description: string, priority: number, isDone = false) {\n    this.title = title;\n    this.description = description;\n    this.priority = priority;\n    this.isDone = isDone;\n  }\n}\n","import { SubPlan } from './../models/plan.model';\nimport { PlanDate } from \"../models/plan-date.model\";\nimport { Plan } from \"../models/plan.model\";\n// import { Injectable } from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Utils {\n  public static readonly fullDays: string[] = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  public static readonly days: string[] = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  public static subPlan: SubPlan = null;\n\n  constructor(private router: Router) { }\n\n  /**\n   * A method to toggle the collapse class.\n   *\n   * @param {*} element Element to toggle the class 'show'.\n   * @memberof Utils\n   */\n  toggleCollapse(element) {\n    element.classList.toggle(\"show\");\n  }\n\n  /**\n   * A method that returns a long or short date string of the Date object.\n   *\n   * @param {Date} date Date to convert to string.\n   * @param {boolean} [isLong=true] If isLong is true, return the long version of the date string,\n   * otherwise return the short version of the date string.\n   * @return {String} Date string to display.\n   * @memberof Utils\n   */\n  getDateString(date: Date, isLong: boolean = true) {\n    let dayName;\n    let monthName;\n\n    if (isLong) { // If isLong is true, set the dayName and monthName to the long string\n      dayName = date.toLocaleString(\"default\", { weekday: \"long\" });\n      monthName = date.toLocaleString('default', { month: 'long' });\n    }\n    else {        // Otherwise set the dayName and monthName to the short string\n      dayName = date.toLocaleString(\"default\", { weekday: \"short\" });\n      monthName = date.toLocaleString('default', { month: 'short' });\n    }\n\n    // Concatenate and create the full date string\n    let dateString = `${dayName}, ${monthName} ${date.getDate().toString().padStart(2, '0')}, ${date.getFullYear()}`;\n    return dateString;\n  }\n\n  /**\n   * Get all PlanDates in the month.\n   *\n   * @param {Plan[]} data Plans that needs to be inserted into the PlanDate.\n   * @param {number} year Year that the PlanDate is in.\n   * @param {number} month Month that the PlanDate is in.\n   * @return {PlanDate[]} Return every PlanDate in the selected month.\n   * @memberof Utils\n   */\n  getPlanDatesInMonth(data: Plan[], year: number, month: number) {\n    let startDate = new Date(year, month, 1);\n    // Passing 0 as the last parameter will return the last of day in the last month, so 1 is added to the chosen month\n    let numOfDays = new Date(year, month + 1, 0).getDate();\n\n    let planDates = this.getNumOfPlanDates(data, startDate, numOfDays);\n\n    return planDates;\n  }\n\n  /**\n   * Get the specified number of plandate objects starting from the date.\n   *\n   * @param {Plan[]} data Plan objects to use for the PlanDate object.\n   * @param {Date} date Date to start the PlanDate object.\n   * @param {number} numOfDays Number of PlanDate objects to create from the starting date.\n   * @return {*}\n   * @memberof Utils\n   */\n  getNumOfPlanDates(data: Plan[], date: Date, numOfDays: number) {\n    let currDate = new Date(date.getTime());\n\n    let planDates = [];\n    for (let i = 0; i < numOfDays; i++) {\n      let plans = [];\n\n      data.forEach(plan => {\n        let dueDate = new Date(plan.dueDate);\n\n        if (dueDate.getFullYear() === currDate.getFullYear() &&\n          dueDate.getMonth() === currDate.getMonth() &&\n          dueDate.getDate() === currDate.getDate()) {\n          plans.push(plan);\n        }\n      });\n\n      planDates[i] = new PlanDate(currDate.getFullYear(), currDate.getMonth(), currDate.getDate(), plans);\n      currDate.setDate(currDate.getDate() + 1);\n    }\n\n    console.log(planDates);\n\n    return planDates;\n  }\n\n  /**\n   * Get a PlanDate object in the date.\n   *\n   * @param {Plan[]} data Plans to add to the PlanDate.\n   * @param {Date} date Date to add to the PlanDate.\n   * @return {PlanDate} Return the PlanDate after adding the plan and the date\n   * @memberof Utils\n   */\n  getPlanDate(data: Plan[], date: Date) {\n    console.log(data);\n\n    // Get the PlanDate\n    let planDates = this.getNumOfPlanDates(data, date, 20);\n    console.log(planDates);\n\n\n    // Return the first PlanDate\n    return planDates[0];\n  }\n\n  /**\n   * Calculate the target plan's progress using its subplans and return the progress value.\n   *\n   * @param {Plan} plan Plan object to calcualte its progress.\n   * @return {number} Return the calculated progress of the plan\n   * @memberof Utils\n   */\n  calculateProgress(plan: Plan): number {\n    let subPlans = plan.subPlans;   // Get subplans\n    let progress = 0;               // Progress is 0 initially\n\n    // If there is no subplan and progress is 100, return 100\n    if (subPlans.length == 0 && plan.progress == 100) {\n      return 100;\n    }\n\n    for (const sp of subPlans) {\n      if (sp.isDone) {\n        progress += 100 / subPlans.length;\n      }\n    }\n\n    console.log(\"calculated progress!!\" + Math.round(progress));\n    \n    return Math.round(progress);\n  }\n\n  /**\n   * Set the static Subplan value to use in the modal.\n   *\n   * @static\n   * @param {SubPlan} subPlan SubPlan to set.\n   * @memberof Utils\n   */\n  public static setSubPlan(subPlan: SubPlan) {\n    this.subPlan = subPlan;\n  }\n\n  /**\n   * Get the static Subplan value to use in the modal.\n   *\n   * @static\n   * @return {SubPlan} Return the static SubPlan value.\n   * @memberof Utils\n   */\n  public static getSubPlan() {\n    // If null, return an empty subplan\n    if (!this.subPlan) {\n      return new SubPlan(\"\", \"\", 0, false);\n    }\n    return this.subPlan;\n  }\n\n  /**\n   * Open or close the detail box in the Calendar page.\n   *\n   * @param {boolean} isOpen If this value is true, open the detail box. Otherwise, close it.\n   * @param {HTMLElement} prevCell The cell previously selected. (This can be null)\n   * @param {HTMLElement} cell The cell currently selected.\n   * @memberof Utils\n   */\n  changeDetailBox(isOpen: boolean, prevCell: HTMLElement, cell: HTMLElement) {\n    // Get elements\n    let calendarWrapper = document.getElementById('calendar-wrapper');\n    let detailBox = document.querySelector('#detail-box');\n    let navbar = <HTMLElement>document.querySelector('nav.navbar');\n    let footer = document.querySelector('footer');\n    let detailOverlay = document.querySelector('#detail-box-overlay');\n    let cells = document.querySelectorAll('#calendar-table td');\n\n    if (isOpen) { // If true, add opened and detil-opened classes to the elements\n      calendarWrapper.classList.add('detail-opened');\n      detailBox.classList.add('opened');\n      footer.classList.add('detail-opened');\n      navbar.classList.add('detail-opened');\n      detailOverlay.classList.add('opened');\n      this.hideScroll(true);\n\n      if (prevCell) { // If the previously selected cell exists, remove the selected class\n        prevCell.classList.remove('selected');\n      }\n      cell.classList.add('selected');\n    }\n    else { // Otherwise, remove opened and detil-opened classes from the elements\n      calendarWrapper.classList.remove('detail-opened');\n      detailBox.classList.remove('opened');\n      footer.classList.remove('detail-opened');\n      navbar.classList.remove('detail-opened');\n      detailOverlay.classList.remove('opened');\n      this.hideScroll(false);\n      // Remove selected class from all cells\n      cells.forEach(cell => cell.classList.remove('selected'));\n    }\n  }\n\n  /**\n   * Enable or disable scroll by toggling the class 'scroll-disabled' on the body.\n   * @param {boolean} isHidden This value is true if the scroll is supposed to be visible.\n   *\n   * @memberof Utils\n   */\n  hideScroll(isHidden: boolean) {\n    let body = document.querySelector('body');\n    let html = document.querySelector('html');\n\n    if (isHidden) {   // Hide the scrollbar\n      body.classList.add('scroll-disabled');\n      html.classList.add('scroll-disabled');\n    }\n    else {  // Enable the scrollbar\n      body.classList.remove('scroll-disabled');\n      html.classList.remove('scroll-disabled');\n    }\n  }\n\n  /**\n   * Change the input element's status to valid or invalid.\n   * If the input is empty, display the error message.\n   *\n   * @param {HTMLInputElement} inputEl Input element to check the entered value.\n   * @param {HTMLElement} errorEl Error message element to display or hide.\n   * @param {boolean} isValid If the value is valid or not.\n   * @memberof Utils\n   */\n  changeInputStatus(inputEl: HTMLInputElement, errorEl: HTMLElement, isValid: boolean) {\n    // If input element exist, add or remove the class\n    if (inputEl) {\n      if (!isValid) {\n        inputEl.classList.add('invalid');\n      }\n      else {\n        inputEl.classList.remove('invalid');\n      }\n    }\n\n    // If error message element exist, add or remove the class\n    if (errorEl) {\n      if (!isValid) {\n        errorEl.classList.add('invalid');\n      }\n      else {\n        errorEl.classList.remove('invalid');\n      }\n    }\n  }\n\n  // /**\n  //  * Display a flash message.\n  //  *\n  //  * @param {string} message Message to display.\n  //  * @param {string} cssClass CSS style to apply.\n  //  * @memberof Utils\n  //  */\n  // showFlash(message: string, cssClass: string) {\n  //   // 2nd param (optional) - object with options.\n  //   this.flashMessage.show(message, { cssClass: cssClass, timeout: 2000 });\n  // }\n\n  /**\n   * Check if str1 includes any substring of str2.\n   * Example usage: check whether password includes email or name.\n   *\n   * @param {string} str1 String to check if substring of str2 is included.\n   * @param {string} str2 String to compare to str1.\n   * @param {number} substrLen Length of substring which will be applid to str2.\n   * @return {*}  {boolean}\n   * @memberof Utils\n   */\n  strIncludesStr(str1: string, str2: string, substrLen: number): boolean {\n    // Both strings to lowercase\n    str1 = str1.toLowerCase();\n    str2 = str2.toLowerCase();\n\n    // If the second string's length is less than or equal to the substring length(invalid), return false\n    if (str2.length <= substrLen)\n      return false;\n\n    // For loop\n    for (let i = 0; i < str2.length - substrLen; i++) {\n      // Substring the second string from (i) to (i + length)\n      let substring = str2.substring(i, i + substrLen);\n\n      // If the first string includes the substring of the second string, return true\n      if (str1.includes(substring))\n        return true;\n    }\n  }\n\n  /**\n   * Redirect to the uri and refresh the components.\n   *\n   * @param {string} uri URI to redirect to.\n   * @memberof Utils\n   */\n  redirectTo(uri: string) {\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() =>\n      this.router.navigate([uri]));\n  }\n}\n","import { HttpInterceptor } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthIntercepterService implements HttpInterceptor {\n\n  constructor() { }\n\n  // Intercept the request and add the 'withCredentials' option.\n  intercept(req, next) {\n    if (req.headers.get('Authorization') == null) {\n      let tokenizedReq = req.clone({\n        withCredentials: true\n      });\n      //Code to add Authorization header\n      return next.handle(tokenizedReq);\n    } else {\n      return next.handle(req);\n    }\n  }\n}\n","import { HttpErrorResponse, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ErrorInterceptorService implements HttpInterceptor {\n  constructor(private router: Router) { }\n\n  // Intercept the http request and handle the error\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    console.log(\"in ErrorHandler - Interceptor\");\n    return next.handle(req)\n      .pipe(catchError(err => this.handleError(err)));\n  }\n\n  handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      console.log('error ' + error.message);\n\n      this.router.navigate(['**']);\n    }\n    // Handle the anauthorized error\n    else if (error.status == 401) {\n      console.log('error ' + error.message);\n\n      this.router.navigate(['login']);\n    }\n    else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.log('error ' + error.message);\n      console.error(\n        `Backend error ${error.status}\\n body: `, error.error);\n      this.router.navigate(['**']);\n    }\n    // Return an observable with a user-facing error message.\n\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from \"@angular/core\";\n\n@Directive({\n  selector: '[ngVar]',\n})\nexport class VarDirective {\n@Input()\nset ngVar(context: any) {\n  this.context.$implicit = this.context.ngVar = context;\n  this.updateView();\n}\n\ncontext: any = {};\n\nconstructor(private vcRef: ViewContainerRef, private templateRef: TemplateRef<any>) {}\n\nupdateView() {\n  this.vcRef.clear();\n  this.vcRef.createEmbeddedView(this.templateRef, this.context);\n}\n}\n","import { Plan } from './../../models/plan.model';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlanService {\n  year: string = '2021';\n  month: string = '5';\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n    withCredentials: true,\n    observe: 'response' as 'response'\n  };\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Get all plans in the given month.\n   *\n   * @return {*}  {Observable<Plan[]>} Return the Observable of Plan array.\n   * @memberof PlanService\n   */\n  getData(): Observable<Plan[]> {\n    return this.http.get<Plan[]>(`/plan/${this.year}/${this.month.padStart(2, '0')}`);\n  }\n\n  /**\n   * Get all plans belong to the user in the given month.\n   *\n   * @param {Date} date Date that contains the month to search.\n   * @return {*}  {Observable<HttpResponse<Plan[]>>} Return the Observable of full HttpResponse of the Plan array.\n   * @memberof PlanService\n   */\n  getDataByMonth(date: Date): Observable<HttpResponse<Plan[]>> {\n    let month = date.getMonth() + 1;\n    console.log(`/plan/${date.getFullYear()}/${month}`);\n\n    return this.http.get<Plan[]>(`/plan/${date.getFullYear()}/${month}`, this.httpOptions);\n  }\n\n  /**\n   * Get the plans belong to the user in the given date.\n   *\n   * @param {Date} date Date that contains the date to search.\n   * @return {*} {Observable<HttpResponse<Plan[]>>} Return the Observable of full HttpResponse of the Plan array.\n   * @memberof PlanService\n   */\n  getDataByDate(date: Date): Observable<HttpResponse<Plan[]>> {\n    let month = date.getMonth() + 1;\n    console.log(`/plan/${date.getFullYear()}/${month}/${date.getDate()}`);\n\n    return this.http.get<Plan[]>(`/plan/${date.getFullYear()}/${month}/${date.getDate()}`, this.httpOptions);\n  }\n\n  /**\n   * Get a plan by the planId.\n   *\n   * @param {string} id Plan ID to get.\n   * @return {*} {Observable<HttpResponse<Plan>>} Return the Observable of full HttpResponse of the Plan.\n   * @memberof PlanService\n   */\n  getDataById(id: string): Observable<HttpResponse<Plan>> {\n    return this.http.get<Plan>(`/plan/edit/${id}`, this.httpOptions);\n  }\n\n  /**\n   * Get plans between two dates.\n   *\n   * @param {Date} date Starting date to display.\n   * @param {number} days number of days to display from the starting date\n   * @return {*}  {Observable<HttpResponse<Plan>>}\n   * @memberof PlanService\n   */\n  getDataByDateAndDays(date: Date, days: number): Observable<HttpResponse<Plan[]>> {\n    //router.get(\"/:year/:month/:date/:day\", auth.required, planController.getDataByDateandDays);\n    let month = date.getMonth() + 1;\n\n    console.log(`/plan/${date.getFullYear()}/${month}/${date.getDate()}/${days}`);\n\n    return this.http.get<Plan[]>(`/plan/${date.getFullYear()}/${month}/${date.getDate()}/${days}`, this.httpOptions);\n  }\n\n  /**\n   * Update a plan sending the PUT request.\n   *\n   * @param {Plan} plan Plan object to update.\n   * @return {*} {Observable<HttpResponse<Plan>>} Return the Observable of full HttpResponse of the Plan.\n   * @memberof PlanService\n   */\n  updatePlan(plan): Observable<HttpResponse<Plan>> {\n    /* put(baseUrl, data) */\n    /* response type: Plan */\n    console.log('trying to update the plan!' + JSON.stringify(plan));\n    \n    return this.http.put<Plan>(`/plan/${plan._id}`, JSON.stringify(plan), this.httpOptions);\n  }\n\n  /**\n   * Add a plan to the database sending the POST request.\n   *\n   * @param {*} data Plan object to add.\n   * @return {*} {Observable<HttpResponse<Plan>>} Return the Observable of full HttpResponse of the added plan.\n   * @memberof PlanService\n   */\n  addPlan(plan): Observable<HttpResponse<Plan>> {\n    return this.http.post<Plan>('/plan', JSON.stringify(plan), this.httpOptions);\n  }\n\n  /**\n   * Add a plan to the database sending the POST request.\n   *\n   * @param {*} id ID of the plan to delete.\n   * @return {*} {Observable<HttpResponse<Plan>>} Return the Observable of full HttpResponse of the deleted plan.\n   * @memberof PlanService\n   */\n  deletePlan(id: string) {\n    return this.http.delete<Plan>(`/plan/${id}`, this.httpOptions);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { User } from '../../models/user.model';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  public isUserLoggedIn: BehaviorSubject<any> = new BehaviorSubject<any>({});\n\n  // Http option that will be used for the request\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n    withCredentials: true,              // Set true to send the cookie\n    observe: 'response' as 'response'   // Observes the response object\n  };\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  /**\n   * Check if the user is already logged in or not.\n   *\n   * @return {Promise}  Return the boolean(True if user is logged in) type of Promise.\n   * @memberof UserService\n   */\n  isAuthenticated(): Promise<boolean> {\n    return this.http.post<any>('/user/authenticated', this.httpOptions).toPromise()\n    .then((a) => {\n      console.log(a);\n      if(Boolean(a.authenticated)) {\n        // Set the value of the isUserLoggedIn\n        this.isUserLoggedIn.next({loggedIn: a.authenticated, user: a.user});\n        return <boolean>a.authenticated;\n      }\n    });\n  }\n\n  /**\n   * Get the user currently logged in.\n   *\n   * @return {*} Return the Observable of the HttpResponse\n   * @memberof UserService\n   */\n  getData() {\n    return this.http.get<User>('/user', this.httpOptions);\n  }\n\n  /**\n   * Add a new user to the database by sending a post request.\n   *\n   * @param {*} data Data of the Registration form.\n   * @return {User} Data of the registered user.\n   * @memberof UserService\n   */\n  addUser(data: any) {\n    console.log(JSON.stringify(data));\n\n    return this.http.post<User>('/user/register', JSON.stringify(data), { headers: new HttpHeaders().set('Content-Type', 'application/json') });\n  }\n\n  /**\n   * Get a user by the email.\n   *\n   * @param {*} email The email of the user to find.\n   * @return {User} Return a user that has the given email.\n   * @memberof UserService\n   */\n  getUserByEmail(email: string) {\n    console.log(JSON.stringify(email));\n\n    return this.http.get<User>(`/user/${email}`);\n  }\n\n  /**\n   * Login and get the user logged in.\n   *\n   * @param {*} data The data of the login form.\n   * @return {Observable<any>}  Return the observable that contains the value of \"loggedIn\" and \"user\"(first name)\n   * @memberof UserService\n   */\n  tryLogin(data): Observable<any> {\n    this.http.post<any>('/user/login', JSON.stringify(data), this.httpOptions)\n      .toPromise()\n      .then((a) => {\n        console.log('post done!');\n        \n        this.isUserLoggedIn.next({loggedIn: true, user: a.body.firstName});\n        this.router.navigate(['']);\n      });\n    return;\n  }\n\n  /**\n   * Logout and get the user just logged out.\n   *\n   * @return {Observable<any>}  Return the observable that contains the value of \"loggedIn\" and \"user\"(first name)\n   * @memberof UserService\n   */\n  tryLogout() {\n    this.http.post<any>('/user/logout', this.httpOptions)\n      .toPromise()\n      .then((a) => {\n        this.isUserLoggedIn.next({loggedIn: false, user: a.firstName});\n        this.router.navigate(['login']);\n      });\n    return;\n  }\n}\n","import { UserService } from './../../services/user/user.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-email-verification',\n  templateUrl: './email-verification.component.html',\n  styleUrls: ['./email-verification.component.css']\n})\nexport class EmailVerificationComponent implements OnInit {\n  email: string;\n  message: string;\n  isConfirmed: boolean;\n\n  constructor(private route: ActivatedRoute, private router: Router, private userService: UserService) { }\n\n  ngOnInit(): void {\n    const routeParams = this.route.snapshot.paramMap;   // Get params\n    const email = routeParams.get('email');             // Plan ID to get the chosen plan data\n\n    // Find the use using the email\n    this.userService.getUserByEmail(email).subscribe(data => {\n      // If the user already verified the email, set the message\n      if(data.confirmed) {\n        this.message = \"Your email is already verified.\"\n        this.email = data.email;\n        this.isConfirmed = true;\n      }\n      else {\n        this.message = \"Please verify your email.\"\n        this.email = data.email;\n        this.isConfirmed = false;\n      }\n    });\n\n  }\n\n}\n","<p>{{message}}</p>\n<p>{{email}}</p>\n<a *ngIf=\"isConfirmed\" href=\"/login\">Login here</a>\n","import { HttpResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserService } from 'src/app/services/user/user.service';\nimport { Utils } from 'src/app/services/Utils';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  validationForm: FormGroup;\n  passwordInput: HTMLInputElement;\n  emailInput: HTMLInputElement;\n\n  constructor(private utils: Utils, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    // Check whether the user is already logged in\n    this.userService.isAuthenticated().then((authenticated) => {\n      if(authenticated) {\n        // If already logged in, navigate to the home page\n        this.router.navigate(['']);\n      }\n    });\n\n    // Login form\n    this.validationForm = new FormGroup({\n      password: new FormControl(null),\n      email: new FormControl(null)\n    });\n\n    // Checkbox to show or hide the password\n    let showPwCheckbox = <HTMLInputElement>document.querySelector('#cbShowPassword');\n    // EventListener on click (Show or hide password)\n    showPwCheckbox.addEventListener('click', () => {\n      if (showPwCheckbox.checked) this.passwordInput.type = 'text';\n      else this.passwordInput.type = 'password';\n    });\n\n    // Get input elements\n    this.passwordInput = <HTMLInputElement>document.querySelector('#pwPassword');\n    this.emailInput = <HTMLInputElement>document.querySelector('#elEmail');\n  }\n\n  /**\n   * Register a user when the form is submitted.\n   *\n   * @param {FormGroup} form Form value to insert.\n   * @memberof LoginComponent\n   */\n   login(form: FormGroup) {\n    // Get the data and set the value\n    let data = form.value;\n    // Validate inputs and return if any data is invalid\n    if (!this.validateInputs(data))\n      return;\n\n    this.userService.tryLogin(data);\n  }\n\n  get password(): AbstractControl {\n    return this.validationForm.get('password');\n  }\n\n  get email(): AbstractControl {\n    return this.validationForm.get('email');\n  }\n\n  /**\n   * Check if every input is filled and display error message for the empty inputs.\n   *\n   * @param {*} formData Form data to check for the empty input.\n   * @return {*}  {boolean} Return true if every input is valid.\n   * @memberof RegisterComponent\n   */\n   validateInputs(formData: any): boolean {\n    // If data's property is null or empty, store false\n    let isPasswordValid = formData.password != null && formData.password != '';\n    let isEmailValid = formData.email != null && formData.email != '';\n\n    this.utils.changeInputStatus(this.passwordInput, null, isPasswordValid);\n    this.utils.changeInputStatus(this.emailInput, null, isEmailValid);\n    // this.utils.showFlash('Plese complete the form.', 'flash-login');\n    // Check whether the input is valid and add or remove the class 'invalid'\n\n    // If any of input is invalid, return false\n    if (!isPasswordValid || !isEmailValid) return false;\n    // Otherwise, return true\n    return true;\n  }\n\n}\n","<div id=\"login-wrapper\" class=\"\">\n  <!-- Login container -->\n  <form id=\"login-container\" class=\"mx-auto p-4 shadow-lg\" [formGroup]=\"validationForm\"\n    (ngSubmit)=\"login(validationForm)\">\n    <!-- Logo symbol image -->\n    <img src=\"assets/img/logo-icon-with-bg-light.png\" alt=\"logo icon of planify\" class=\"d-block mx-auto mt-5\"\n      id=\"logo-img\" width=\"150\">\n    <!-- Welcome message -->\n    <h2 id=\"welcome-heading\" class=\"text-red-hat text-center mt-4\">\n      Welcome to\n      <img src=\"assets/img/logo.png\" alt=\"logo of planify\" width=\"110\" class=\"mb-2\" id=\"logo-text-img\">\n    </h2>\n    <!-- Some description -->\n    <p class=\"text-center text-roboto fw-light mt-4 welcome-desc\">Lorem Ipsum is simply dummy text of the printing\n      and\n      typesetting industry.\n      Lorem Ipsum has been the industry's standard\n      dummy text when an unknown printer.\n    </p>\n    <!-- Email input container -->\n    <div id=\"email-container\" class=\"mt-4 position-relative\">\n      <input type=\"email\" id=\"elEmail\" placeholder=\"Email\" class=\"w-100 p-2\" formControlName=\"email\" />\n    </div>\n    <!-- Password input container -->\n    <div id=\"password-container\" class=\"mt-3 position-relative\">\n      <input type=\"password\" id=\"pwPassword\" placeholder=\"Password\" class=\"w-100 p-2\" formControlName=\"password\" />\n    </div>\n    <!-- Show password checkbox -->\n    <label class=\"checkbox-container d-inline-block mt-3\">\n      Show password\n      <input type=\"checkbox\" value=\"true\" id=\"cbShowPassword\">\n      <span class=\"checkbox-checkmark\"></span>\n    </label>\n    <!-- Forgot login link -->\n    <!-- TODO: retrieve password page -->\n    <a href=\"#\" class=\"d-block mt-2\" id=\"forgot-password-link\">Forgot password?</a>\n    <!-- Buttons -->\n    <button type=\"submit\" class=\"btn w-100 fw-light mt-3\" id=\"login-btn\" mdbRipple>Login</button>\n    <a href=\"/register\" class=\"btn w-100 fw-light mt-2 mb-3\" id=\"register-btn\" mdbRipple>Sign up</a>\n  </form>\n</div>\n","import { UserService } from './../../services/user/user.service';\nimport { Utils } from './../../services/Utils';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['../login/login.component.css', './register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  validationForm: FormGroup;\n  passwordInput: HTMLInputElement;\n  firstNameInput: HTMLInputElement;\n  lastNameInput: HTMLInputElement;\n  emailInput: HTMLInputElement;\n\n  constructor(private utils: Utils, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    // Check whether the user is already logged in\n    this.userService.isAuthenticated().then((authenticated) => {\n      if (authenticated) {\n        // Navigate to the home page if already logged in\n        this.router.navigate(['']);\n      }\n    });\n\n    // Register form\n    this.validationForm = new FormGroup({\n      password: new FormControl(null),\n      firstname: new FormControl(null),\n      lastname: new FormControl(null),\n      email: new FormControl(null)\n    });\n\n    // Get all input elements and password rule ul\n    this.passwordInput = <HTMLInputElement>document.querySelector('#pwPassword');\n    this.firstNameInput = <HTMLInputElement>document.querySelector('#txtFirstName');\n    this.lastNameInput = <HTMLInputElement>document.querySelector('#txtLastName');\n    this.emailInput = <HTMLInputElement>document.querySelector('#elEmail');\n    let pwRulesUl = <HTMLElement>document.querySelector('ul.pw-rules');\n\n    // Checkbox to show or hide the password\n    let showPwCheckbox = <HTMLInputElement>document.querySelector('#cbShowPassword');\n\n    // EventListener on click (Show or hide password)\n    showPwCheckbox.addEventListener('click', () => {\n      if (showPwCheckbox.checked) this.passwordInput.type = 'text';\n      else this.passwordInput.type = 'password';\n    });\n\n    // Display the password rules ul\n    let showPwGuide = () => {\n      if (!pwRulesUl.classList.contains('d-block')) {\n        pwRulesUl.classList.add('d-block');\n      }\n      pwRulesUl.classList.remove('d-none');\n    };\n\n    // Hide the password rules ul\n    let hidePwGuide = () => {\n      if (!pwRulesUl.classList.contains('d-none')) {\n        pwRulesUl.classList.add('d-none');\n      }\n      pwRulesUl.classList.remove('d-block');\n    };\n\n    // Add onfocus event listener to each input to show or hide the password guide ul\n    this.passwordInput.addEventListener('focus', showPwGuide, this.validatePassword());\n\n    // password guide ul gets hidden when the input other than password is focused\n    this.firstNameInput.addEventListener('focus', hidePwGuide);\n    this.lastNameInput.addEventListener('focus', hidePwGuide);\n    this.emailInput.addEventListener('focus', hidePwGuide);\n\n    // When anything is input to the password input, validate it to update the password guide ul\n    this.passwordInput.addEventListener('input', () => {\n      this.validatePassword();\n    });\n  }\n\n  get password(): AbstractControl {\n    return this.validationForm.get('password');\n  }\n\n  get firstname(): AbstractControl {\n    return this.validationForm.get('firstname');\n  }\n\n  get lastname(): AbstractControl {\n    return this.validationForm.get('lastname');\n  }\n\n  get email(): AbstractControl {\n    return this.validationForm.get('email');\n  }\n\n  /**\n   * Check if every input is filled and display error message for the empty inputs.\n   *\n   * @param {*} formData Form data to check for the empty input.\n   * @return {*}  {boolean} Return true if every input is valid.\n   * @memberof AddPlanComponent\n   */\n  validateInputs(formData: any): boolean {\n    let emailRegex = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n    // If data's property is null or empty, store false\n    let isFirstNameValid = formData.firstname != null && formData.firstname !== '';\n    let isLastNameValid = formData.lastname != null && formData.lastname !== '';\n    let isPasswordValid = formData.password != null && formData.password != '' && this.validatePassword();\n    let isEmailValid = formData.email != null && formData.email != '' && formData.email.match(emailRegex);\n\n    // this.utils.showFlash('Plese complete the form.', 'flash-login');\n    // Check whether the input is valid and add or remove the class 'invalid'\n    this.utils.changeInputStatus(this.passwordInput, null, isPasswordValid);\n    this.utils.changeInputStatus(this.firstNameInput, null, isFirstNameValid);\n    this.utils.changeInputStatus(this.lastNameInput, null, isLastNameValid);\n    this.utils.changeInputStatus(this.emailInput, null, isEmailValid);\n\n    // If any of input is invalid, return false\n    if (!isPasswordValid || !isFirstNameValid || !isLastNameValid || !isEmailValid) return false;\n    // Otherwise, return true\n    return true;\n  }\n\n  /**\n   * Register a user when the form is submitted.\n   *\n   * @param {FormGroup} form Form value to insert.\n   * @memberof AddPlanComponent\n   */\n  registerUser(form: FormGroup) {\n    // Get the data and set the value\n    let data = form.value;\n    // Validate inputs and return if any data is invalid\n    if (!this.validateInputs(data))\n      return;\n\n    // Create a Plan object using JSON\n    let newUser = JSON.parse(JSON.stringify(data));\n    // Add the plan using the Plan service\n    this.userService.addUser(newUser).subscribe(data => {\n      // Navigate to login page\n      this.router.navigate([`verify/${newUser.email}`]);\n    });\n  }\n\n  /**\n   * Validate if below conditions are satisfied.\n   * - Not contain email, first name or last name.\n   * - Length should be between 8 and 15.\n   * - Contain uppercase, lowercase and number.\n   * - Contains at least 1 special character.\n   *\n   * @return {*}  {boolean} Return true only if all the conditions are satisfied.\n   * @memberof RegisterComponent\n   */\n  validatePassword(): boolean {\n    // Get values from the input\n    let password = this.passwordInput.value;\n    let firstname = this.firstNameInput.value;\n    let lastname = this.lastNameInput.value;\n    let email = this.emailInput.value;\n\n    // Get all li elements\n    let pwRuleItems = <NodeListOf<HTMLElement>>document.querySelectorAll('.pw-rules li');\n\n    // Password does not contain email, first name or last name\n    let rule1 = !this.utils.strIncludesStr(password, email, 4) &&\n      !this.utils.strIncludesStr(password, firstname, 4) &&\n      !this.utils.strIncludesStr(password, lastname, 4);\n    // Password length is between 8 and 15\n    let rule2 = password.length >= 8 && password.length <= 15;\n    // Password contains uppercase, lowercase and number\n    let rule3 = password.match(/(?=.{8,15}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$/g) != null;\n    // Password contains at least 1 special character\n    let rule4 = password.match(/(?=.*[!@#$%^&*]).*$/g) != null;\n\n    // If the password satisfies the condition, change the status of list item (fail -> success or vice versa)\n    this.changeLiStatus(pwRuleItems[0], rule1);\n    this.changeLiStatus(pwRuleItems[1], rule2);\n    this.changeLiStatus(pwRuleItems[2], rule3);\n    this.changeLiStatus(pwRuleItems[3], rule4);\n\n    // If all conditions are satisfied, return true\n    if (rule1 && rule2 && rule3 && rule4) {\n      return true;\n    }\n    // Otherwise, return false\n    return false;\n  }\n\n  /**\n   * Change the status of the ul>li element's status to\n   * (success -> fail) or (fail -> success)\n   *\n   * @param {HTMLElement} listEl li element in the ul to change the status.\n   * @param {boolean} isValid If true, icon changed from times to checkmark and text colour changed red to green.\n   * @memberof RegisterComponent\n   */\n  changeLiStatus(listEl: HTMLElement, isValid: boolean) {\n    // Get the icon in the list\n    let icon = listEl.querySelector('i');\n    if (isValid) {  // If valid\n      if (!listEl.classList.contains('text-success'))\n        // Add the class only when the li does not contain it\n        listEl.classList.add('text-success');\n      // change the icon from times to checkmark\n      icon.classList.remove('fa-times-circle');\n      icon.classList.add('fa-check-circle');\n    }\n    else {\n      // Change the text color to red\n      listEl.classList.remove('text-success');\n      // change the icon from checkmark to times\n      icon.classList.add('fa-times-circle');\n      icon.classList.remove('fa-check-circle');\n    }\n  }\n}\n","<div id=\"login-wrapper\" class=\"\">\n  <!-- Register container -->\n  <form id=\"login-container\" class=\"mx-auto p-4 shadow-lg\" [formGroup]=\"validationForm\"\n    (ngSubmit)=\"registerUser(validationForm)\">\n    <!-- Logo symbol image -->\n    <img src=\"assets/img/logo-icon-with-bg-light.png\" alt=\"logo icon of planify\" class=\"d-block mx-auto mt-5\"\n      id=\"logo-img\" width=\"150\">\n    <!-- Welcome message -->\n    <h2 id=\"welcome-heading\" class=\"text-red-hat text-center mt-4\">\n      Welcome to\n      <img src=\"assets/img/logo.png\" alt=\"logo of planify\" width=\"110\" class=\"mb-2\" id=\"logo-text-img\">\n    </h2>\n    <!-- Some description -->\n    <p class=\"text-center text-roboto fw-light mt-4 welcome-desc\">\n      Lorem Ipsum is simply dummy text of the printing\n      and\n      typesetting industry.\n      Lorem Ipsum has been the industry's standard\n      dummy text when an unknown printer.\n    </p>\n    <ul class=\"text-roboto mt-4 p-3 pw-rules rounded d-none\">\n      <li id=\"item-email\"><i class=\"far fa-times-circle\"></i> Not contain your name or email</li>\n      <li id=\"item-more-char\"><i class=\"far fa-times-circle\"></i> Contain 8-15 characters</li>\n      <li id=\"item-case-number\"><i class=\"far fa-times-circle\"></i> Contain uppercase, lowercase and number</li>\n      <li id=\"item-special\"><i class=\"far fa-times-circle\"></i> Contain more than one special character (! @ # ?)</li>\n    </ul>\n    <!-- Email input container -->\n    <div id=\"email-container\" class=\"mt-2 position-relative\">\n      <input type=\"email\" id=\"elEmail\" placeholder=\"Email\" class=\"w-100 py-2 px-3\" formControlName=\"email\" />\n    </div>\n    <!-- Password input container -->\n    <div id=\"password-container\" class=\"mt-2 position-relative\">\n      <input type=\"password\" id=\"pwPassword\" placeholder=\"Password\" class=\"w-100 py-2 px-3\"\n        formControlName=\"password\" />\n    </div>\n    <!-- First Name input container -->\n    <div id=\"first-name-container\" class=\"mt-2 position-relative\">\n      <input type=\"text\" id=\"txtFirstName\" placeholder=\"First name\" class=\"w-100 py-2 px-3\"\n        formControlName=\"firstname\" />\n    </div>\n    <!-- Last Name input container -->\n    <div id=\"last-name-container\" class=\"mt-2 position-relative\">\n      <input type=\"text\" id=\"txtLastName\" placeholder=\"Last name\" class=\"w-100 py-2 px-3\" formControlName=\"lastname\" />\n    </div>\n    <!-- Show password checkbox -->\n    <label class=\"checkbox-container d-inline-block mt-3\">\n      Show password\n      <input type=\"checkbox\" value=\"true\" id=\"cbShowPassword\">\n      <span class=\"checkbox-checkmark\"></span>\n    </label>\n    <!-- Login link -->\n    <!-- TODO: retrieve password page -->\n    <a href=\"/login\" class=\"d-block mt-2\" id=\"forgot-password-link\">Already have an account?</a>\n    <!-- Buttons -->\n    <button class=\"btn w-100 fw-light mt-4 mb-3\" id=\"register-btn\" mdbRipple type=\"submit\">Sign up</button>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>user works!</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule).then(ref => {\n  // Ensure that Angular destroys itself on hot reloads.\n  if (window['ngRef']) {\n    window['ngRef'].destroy();\n  }\n  window['ngRef'] = ref;\n  // Otherwise log the boot error\n}).catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///"}